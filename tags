!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVATION	src/activations.h	/^}ACTIVATION;$/;"	t	typeref:enum:__anon26
ACTIVATIONS_H	src/activations.h	2;"	d
ACTIVATION_LAYER_H	src/activation_layer.h	2;"	d
ACTIVE	src/layer.h	/^    ACTIVE,$/;"	e	enum:__anon21
AI2	src/convolutional_layer.cpp	17;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	406;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	410;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	414;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	417;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	420;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	425;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	428;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	431;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	435;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	405;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	412;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	415;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	420;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	423;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	426;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	430;"	d	file:
AVGPOOL	src/layer.h	/^    AVGPOOL,$/;"	e	enum:__anon21
AVGPOOL_LAYER_H	src/avgpool_layer.h	2;"	d
B1	src/layer.h	/^    float B1;$/;"	m	struct:layer
B1	src/network.h	/^    float B1;$/;"	m	struct:network
B2	src/layer.h	/^    float B2;$/;"	m	struct:layer
B2	src/network.h	/^    float B2;$/;"	m	struct:network
BASE_LAYER_H	src/layer.h	2;"	d
BATCHNORM	src/layer.h	/^    BATCHNORM,$/;"	e	enum:__anon21
BATCHNORM_LAYER_H	src/batchnorm_layer.h	2;"	d
BLANK	src/layer.h	/^    BLANK$/;"	e	enum:__anon21
BLAS_H	src/blas.h	2;"	d
BLOCK	src/cuda.h	16;"	d
BOX_H	src/box.h	2;"	d
BattleRoyaleWithCheese	app/darknet/compare.cpp	/^void BattleRoyaleWithCheese(char *filename, char *weightfile)$/;"	f
Blob	src/blob.h	/^struct Blob {$/;"	s
Blob	src/blob.h	/^typedef struct Blob Blob;$/;"	t	typeref:struct:Blob
CAPTCHA_DATA	src/data.h	/^    CAPTCHA_DATA,$/;"	e	enum:__anon24
CASE	src/stb_image.h	1338;"	d
CASE	src/stb_image.h	1356;"	d
CASE	src/stb_image.h	4025;"	d
CASE	src/stb_image.h	4038;"	d
CASE	src/stb_image.h	4042;"	d
CASE	src/stb_image.h	4055;"	d
CLASSIFICATION_DATA	src/data.h	/^    CLASSIFICATION_DATA,$/;"	e	enum:__anon24
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master\/build$/;"	m
CMAKE_BINARY_DIR	build/app/Makefile	/^CMAKE_BINARY_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master\/build$/;"	m
CMAKE_BINARY_DIR	build/app/darknet++/Makefile	/^CMAKE_BINARY_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master\/build$/;"	m
CMAKE_BINARY_DIR	build/app/darknet/Makefile	/^CMAKE_BINARY_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master\/build$/;"	m
CMAKE_BINARY_DIR	build/src/Makefile	/^CMAKE_BINARY_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master\/build$/;"	m
CMAKE_BINARY_DIR	build/yolo++/Makefile	/^CMAKE_BINARY_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/app/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/app/darknet++/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/app/darknet/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/src/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/yolo++/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master$/;"	m
CMAKE_SOURCE_DIR	build/app/Makefile	/^CMAKE_SOURCE_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master$/;"	m
CMAKE_SOURCE_DIR	build/app/darknet++/Makefile	/^CMAKE_SOURCE_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master$/;"	m
CMAKE_SOURCE_DIR	build/app/darknet/Makefile	/^CMAKE_SOURCE_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master$/;"	m
CMAKE_SOURCE_DIR	build/src/Makefile	/^CMAKE_SOURCE_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master$/;"	m
CMAKE_SOURCE_DIR	build/yolo++/Makefile	/^CMAKE_SOURCE_DIR = \/home\/mw4vision\/Desktop\/sachin\/yolo_cpp-master$/;"	m
COL2IM_H	src/col2im.h	2;"	d
COMBO	src/stb_image.h	1337;"	d
COMPARE_DATA	src/data.h	/^    COMPARE_DATA,$/;"	e	enum:__anon24
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	14;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	210;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	237;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	262;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	265;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	268;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	45;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	75;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	257;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	260;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	263;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	247;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	91;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	106;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	54;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	69;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	197;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	248;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	188;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	215;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	204;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	234;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
CONNECTED	src/layer.h	/^    CONNECTED,$/;"	e	enum:__anon21
CONNECTED_LAYER_H	src/connected_layer.h	2;"	d
CONSTANT	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon28
CONVOLUTIONAL	src/layer.h	/^    CONVOLUTIONAL,$/;"	e	enum:__anon21
CONVOLUTIONAL_LAYER_H	src/convolutional_layer.h	2;"	d
COST	src/layer.h	/^    COST,$/;"	e	enum:__anon21
COST_LAYER_H	src/cost_layer.h	2;"	d
COST_TYPE	src/layer.h	/^} COST_TYPE;$/;"	t	typeref:enum:__anon22
CRNN	src/layer.h	/^    CRNN,$/;"	e	enum:__anon21
CRNN_LAYER_H	src/crnn_layer.h	2;"	d
CROP	src/layer.h	/^    CROP,$/;"	e	enum:__anon21
CROP_LAYER_H	src/crop_layer.h	2;"	d
CUDA_H	src/cuda.h	2;"	d
Camera	app/darknet/camera.cpp	/^Camera::Camera(int id, std::string url) : id(id), video(url) {$/;"	f	class:Camera
Camera	app/darknet/camera.h	/^class Camera {$/;"	c
Camera	src/camera.cpp	/^Camera::Camera(int id, std::string url) : id(id), video(url) {$/;"	f	class:Camera
Camera	src/camera.h	/^class Camera {$/;"	c
CameraClass	app/darknet/config.h	/^struct CameraClass {$/;"	s
CameraClass	src/config.h	/^struct CameraClass {$/;"	s
CameraInfo	app/darknet/config.h	/^struct CameraInfo {$/;"	s
CameraInfo	src/config.h	/^struct CameraInfo {$/;"	s
Config	app/darknet/config.cpp	/^Config::Config(std::string filename) : file(filename, cv::FileStorage::READ) {$/;"	f	class:Config
Config	app/darknet/config.h	/^class Config {$/;"	c
Config	src/config.cpp	/^Config::Config(std::string filename) : file(filename, cv::FileStorage::READ) {$/;"	f	class:Config
Config	src/config.h	/^class Config {$/;"	c
Contour	src/track.h	/^typedef std::vector<cv::Point> Contour;$/;"	t
DARKNET_OBJECT_H	yolo++/object.h	2;"	d
DARKNET_YOLO_H	yolo++/yolo.h	2;"	d
DATA_H	src/data.h	2;"	d
DEC	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	439;"	d	file:
DEC	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	434;"	d	file:
DECONVOLUTIONAL	src/layer.h	/^    DECONVOLUTIONAL,$/;"	e	enum:__anon21
DECONVOLUTIONAL_LAYER_H	src/deconvolutional_layer.h	2;"	d
DEMO	app/darknet/demo.h	2;"	d
DETECTION	src/layer.h	/^    DETECTION,$/;"	e	enum:__anon21
DETECTION_DATA	src/data.h	/^    DETECTION_DATA,$/;"	e	enum:__anon24
DETECTION_LAYER_H	src/detection_layer.h	2;"	d
DET_DATA	src/data.h	/^    DET_DATA,$/;"	e	enum:__anon24
DROPOUT	src/layer.h	/^    DROPOUT,$/;"	e	enum:__anon21
DROPOUT_LAYER_H	src/dropout_layer.h	2;"	d
DetectedObject	yolo++/object.h	/^    DetectedObject() : object_class(-1), prob(0.), bounding_box(cv::Rect(0,0,0,0)){}$/;"	f	struct:DetectedObject
DetectedObject	yolo++/object.h	/^    DetectedObject(int object_class, float prob, cv::Rect bb) : object_class(object_class), prob(prob), bounding_box(bb){}$/;"	f	struct:DetectedObject
DetectedObject	yolo++/object.h	/^struct DetectedObject$/;"	s
DifferenceTracker	src/difference.cpp	/^DifferenceTracker::DifferenceTracker() : skipped(0) {$/;"	f	class:DifferenceTracker
DifferenceTracker	src/difference.h	/^class DifferenceTracker {$/;"	c
Display	src/display.cpp	/^Display::Display(int cameraId) : fps(100) {$/;"	f	class:Display
Display	src/display.h	/^class Display {$/;"	c
ELU	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/app/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/app/darknet++/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/app/darknet/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/src/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/yolo++/Makefile	/^EQUALS = =$/;"	m
EXP	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon28
FAST_BITS	src/stb_image.h	1434;"	d
FPS	src/display.cpp	/^Display::FPS::FPS(int size) : prevTick(0), size(size), index(0), sum(0), total(0) {$/;"	f	class:Display::FPS
FPS	src/display.h	/^    class FPS {$/;"	c	class:Display
FRAMES	app/darknet/demo.cpp	12;"	d	file:
GEMM_H	src/gemm.h	2;"	d
GRU	src/layer.h	/^    GRU,$/;"	e	enum:__anon21
GRU_LAYER_H	src/gru_layer.h	3;"	d
HARDTAN	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
HEX	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
HEX	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
ID_VOID_MAIN	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IM2COL_H	src/im2col.h	2;"	d
IMAGE_DATA	src/data.h	/^    IMAGE_DATA,$/;"	e	enum:__anon24
IMAGE_H	src/image.h	2;"	d
INCLUDE_STB_IMAGE_WRITE_H	src/stb_image_write.h	81;"	d
LAYER_TYPE	src/layer.h	/^} LAYER_TYPE;$/;"	t	typeref:enum:__anon21
LEAKY	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
LHTAN	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
LINEAR	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
LIST_H	src/list.h	2;"	d
LOCAL	src/layer.h	/^    LOCAL,$/;"	e	enum:__anon21
LOCAL_LAYER_H	src/local_layer.h	2;"	d
LOGGY	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
LOGISTIC	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
MASKED	src/layer.h	/^    SSE, MASKED, SMOOTH$/;"	e	enum:__anon22
MATRIX_H	src/matrix.h	2;"	d
MAXPOOL	src/layer.h	/^    MAXPOOL,$/;"	e	enum:__anon21
MAXPOOL_LAYER_H	src/maxpool_layer.h	2;"	d
MULTIOBJECTTRACKING_C_BLOB_H	src/blob.h	6;"	d
MULTIOBJECTTRACKING_C_SENDBLOB_H	src/blobSender.h	6;"	d
NETWORK	src/layer.h	/^    NETWORK,$/;"	e	enum:__anon21
NETWORK_H	src/network.h	3;"	d
NORMALIZATION	src/layer.h	/^    NORMALIZATION,$/;"	e	enum:__anon21
NORMALIZATION_LAYER_H	src/normalization_layer.h	2;"	d
NUMCHARS	src/data.cpp	331;"	d	file:
OLD_CLASSIFICATION_DATA	src/data.h	/^    OLD_CLASSIFICATION_DATA,$/;"	e	enum:__anon24
OPTION_LIST_H	src/option_list.h	2;"	d
ObjectTracker	src/objecttracker.h	/^class ObjectTracker {$/;"	c
PARSER_H	src/parser.h	2;"	d
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	299;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	305;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	308;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	317;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	320;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	323;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	326;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	338;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	344;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	347;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	350;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	353;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	356;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	359;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	362;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	365;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	385;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	312;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	315;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	318;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	321;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	376;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	380;"	d	file:
PLSE	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
POLY	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon28
RAMP	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
RANDOM	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon28
REGION	src/layer.h	/^    REGION,$/;"	e	enum:__anon21
REGION_DATA	src/data.h	/^    REGION_DATA,$/;"	e	enum:__anon24
REGION_LAYER_H	src/region_layer.h	2;"	d
RELIE	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
RELU	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
REORG	src/layer.h	/^    REORG,$/;"	e	enum:__anon21
REORG_LAYER_H	src/reorg_layer.h	2;"	d
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/app/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/app/darknet++/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/app/darknet/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/src/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/yolo++/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RNN	src/layer.h	/^    RNN,$/;"	e	enum:__anon21
RNN_LAYER_H	src/rnn_layer.h	2;"	d
ROUTE	src/layer.h	/^    ROUTE,$/;"	e	enum:__anon21
ROUTE_LAYER_H	src/route_layer.h	2;"	d
SECRET_NUM	src/utils.h	12;"	d
SERVER_PORT_NUMBER	src/sender.h	15;"	d
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/app/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/app/darknet++/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/app/darknet/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/src/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/yolo++/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHORTCUT	src/layer.h	/^    SHORTCUT,$/;"	e	enum:__anon21
SHORTCUT_LAYER_H	src/shortcut_layer.h	2;"	d
SIG	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon28
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	162;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
SMOOTH	src/layer.h	/^    SSE, MASKED, SMOOTH$/;"	e	enum:__anon22
SOFTMAX	src/layer.h	/^    SOFTMAX,$/;"	e	enum:__anon21
SOFTMAX_LAYER_H	src/softmax_layer.h	2;"	d
SSE	src/layer.h	/^    SSE, MASKED, SMOOTH$/;"	e	enum:__anon22
STAIR	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
STBIDEF	src/stb_image.h	410;"	d
STBIDEF	src/stb_image.h	412;"	d
STBIW_ASSERT	src/stb_image_write.h	126;"	d
STBIW_FREE	src/stb_image_write.h	117;"	d
STBIW_MALLOC	src/stb_image_write.h	115;"	d
STBIW_MEMMOVE	src/stb_image_write.h	120;"	d
STBIW_REALLOC	src/stb_image_write.h	116;"	d
STBI_ASSERT	src/stb_image.h	575;"	d
STBI_FREE	src/stb_image.h	633;"	d
STBI_HAS_LROTL	src/stb_image.h	613;"	d
STBI_INCLUDE_STB_IMAGE_H	src/stb_image.h	215;"	d
STBI_MALLOC	src/stb_image.h	631;"	d
STBI_NEON	src/stb_image.h	720;"	d
STBI_NOTUSED	src/stb_image.h	607;"	d
STBI_NOTUSED	src/stb_image.h	609;"	d
STBI_NO_BMP	src/stb_image.h	533;"	d
STBI_NO_GIF	src/stb_image.h	542;"	d
STBI_NO_HDR	src/stb_image.h	545;"	d
STBI_NO_JPEG	src/stb_image.h	527;"	d
STBI_NO_PIC	src/stb_image.h	548;"	d
STBI_NO_PNG	src/stb_image.h	530;"	d
STBI_NO_PNM	src/stb_image.h	551;"	d
STBI_NO_PSD	src/stb_image.h	536;"	d
STBI_NO_SIMD	src/stb_image.h	649;"	d
STBI_NO_SIMD	src/stb_image.h	664;"	d
STBI_NO_TGA	src/stb_image.h	539;"	d
STBI_NO_ZLIB	src/stb_image.h	556;"	d
STBI_REALLOC	src/stb_image.h	632;"	d
STBI_SIMD_ALIGN	src/stb_image.h	694;"	d
STBI_SIMD_ALIGN	src/stb_image.h	702;"	d
STBI_SIMD_ALIGN	src/stb_image.h	726;"	d
STBI_SIMD_ALIGN	src/stb_image.h	730;"	d
STBI_SSE2	src/stb_image.h	668;"	d
STBI_VERSION	src/stb_image.h	391;"	d
STBI__BYTECAST	src/stb_image.h	1300;"	d
STBI__F_avg	src/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon17
STBI__F_avg_first	src/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon17
STBI__F_none	src/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon17
STBI__F_paeth	src/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon17
STBI__F_paeth_first	src/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon17
STBI__F_sub	src/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon17
STBI__F_up	src/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon17
STBI__HDR_BUFLEN	src/stb_image.h	5795;"	d
STBI__IDCT_1D	src/stb_image.h	1909;"	d
STBI__MARKER_none	src/stb_image.h	2394;"	d
STBI__PNG_TYPE	src/stb_image.h	4295;"	d
STBI__RESTART	src/stb_image.h	2411;"	d
STBI__SCAN_header	src/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon8
STBI__SCAN_load	src/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon8
STBI__SCAN_type	src/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon8
STBI__X64_TARGET	src/stb_image.h	638;"	d
STBI__X86_TARGET	src/stb_image.h	640;"	d
STBI__ZFAST_BITS	src/stb_image.h	3437;"	d
STBI__ZFAST_MASK	src/stb_image.h	3438;"	d
STBI_default	src/stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon5
STBI_grey	src/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon5
STBI_grey_alpha	src/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon5
STBI_rgb	src/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon5
STBI_rgb_alpha	src/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon5
STB_IMAGE_IMPLEMENTATION	src/image.cpp	8;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	src/image.cpp	10;"	d	file:
STEP	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon28
STEPS	src/network.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon28
STRINGIFY	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
STRINGIFY	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
STUDY_DATA	src/data.h	/^    STUDY_DATA,$/;"	e	enum:__anon24
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/app/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/app/darknet++/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/app/darknet/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/src/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/yolo++/Makefile	/^SUFFIXES =$/;"	m
SUPER_DATA	src/data.h	/^    SUPER_DATA$/;"	e	enum:__anon24
SWAG_DATA	src/data.h	/^    SWAG_DATA,$/;"	e	enum:__anon24
Sender	src/sender.cpp	/^Sender::Sender(const char *hostName, int portNumber)$/;"	f	class:Sender
Sender	src/sender.h	/^class Sender {$/;"	c
SortMaster3000	app/darknet/compare.cpp	/^void SortMaster3000(char *filename, char *weightfile)$/;"	f
Spawns	src/camera.h	/^typedef std::vector<cv::Rect> Spawns;$/;"	t
TAG_DATA	src/data.h	/^    TAG_DATA,$/;"	e	enum:__anon24
TANH	src/activations.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN$/;"	e	enum:__anon26
TREE_H	src/tree.h	2;"	d
TWO_PI	src/utils.h	13;"	d
Track	src/track.cpp	/^Track::Track(Contour& contour, int id) : id(id), age(0), visibleCount(0), invisibleAge(0), visible(true) {$/;"	f	class:Track
Track	src/track.cpp	/^Track::Track(DetectedObject& contour, int id) : id(id), age(0), visibleCount(0), invisibleAge(0), visible(true) {$/;"	f	class:Track
Track	src/track.h	/^class Track {$/;"	c
TrackingData	src/track.h	/^typedef cv::Point TrackingData;$/;"	t
Tracks	src/track.h	/^typedef std::vector<std::unique_ptr<Track>> Tracks;$/;"	t
USET	src/rnn_layer.h	12;"	d
UTILS_H	src/utils.h	2;"	d
WRITING_DATA	src/data.h	/^    WRITING_DATA,$/;"	e	enum:__anon24
X	src/data.h	/^    matrix X;$/;"	m	struct:__anon23
XNOR	src/layer.h	/^    XNOR,$/;"	e	enum:__anon21
YCbCr_to_RGB_kernel	src/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon10
Yolo	yolo++/yolo.cpp	/^Yolo::Yolo() : thresh(.24f),$/;"	f	class:Yolo
Yolo	yolo++/yolo.h	/^class Yolo {$/;"	c
abs_mean	src/nightmare.cpp	/^float abs_mean(float *x, int n)$/;"	f
absolute	src/layer.h	/^    int absolute;$/;"	m	struct:layer
activate	src/activations.cpp	/^float activate(float x, ACTIVATION a)$/;"	f
activate_array	src/activations.cpp	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f
activation	src/layer.h	/^    ACTIVATION activation;$/;"	m	struct:layer
adam	src/layer.h	/^    int adam;$/;"	m	struct:layer
adam	src/network.h	/^    int adam;$/;"	m	struct:network
add_bias	src/convolutional_layer.cpp	/^void add_bias(float *output, float *biases, int batch, int n, int size)$/;"	f
add_pixel	src/image.cpp	/^void add_pixel(image m, int x, int y, int c, float val)$/;"	f
age	src/blob.h	/^    char const *age; \/\/can be added by correct wrapper call$/;"	m	struct:Blob
age	src/track.h	/^    int age;$/;"	m	class:Track
ageChangeAssignment	src/track.h	/^    static const int ageChangeAssignment = 100;$/;"	m	class:Track
ageTrackDelete	src/track.h	/^    static const int ageTrackDelete = 1000;$/;"	m	class:Track
alpha	src/layer.h	/^    float alpha;$/;"	m	struct:layer
alphabet	yolo++/yolo.h	/^    image **alphabet;$/;"	m	class:Yolo
alphabet_path	yolo++/yolo.h	/^    const char* alphabet_path;$/;"	m	class:Yolo
alphanum_to_int	src/utils.cpp	/^int alphanum_to_int(char c)$/;"	f
ang	app/darknet/camera.h	/^	int ang;$/;"	m	class:Camera
ang	src/camera.h	/^	int ang;$/;"	m	class:Camera
angle	app/darknet/config.h	/^	int angle;$/;"	m	struct:CameraInfo
angle	src/config.h	/^	int angle;$/;"	m	struct:CameraInfo
angle	src/data.h	/^    float angle;$/;"	m	struct:load_args
angle	src/layer.h	/^    float angle;$/;"	m	struct:layer
angle	src/network.h	/^    float angle;$/;"	m	struct:network
area	src/blob.h	/^    double area;$/;"	m	struct:Blob
aspect	src/data.h	/^    float aspect;$/;"	m	struct:load_args
aspect	src/network.h	/^    float aspect;$/;"	m	struct:network
assignTracks	src/track.cpp	/^void Track::assignTracks(Tracks& tracks, std::vector<DetectedObject>& contours) {$/;"	f	class:Track
assignTracksDiff	src/track.cpp	/^void Track::assignTracksDiff(Tracks& tracks, std::vector<Contour>& contours) {$/;"	f	class:Track
average	app/darknet/darknet.cpp	/^void average(int argc, char *argv[])$/;"	f
avg	app/darknet/demo.cpp	/^static float *avg;$/;"	v	file:
avgpool_layer	src/avgpool_layer.h	/^typedef layer avgpool_layer;$/;"	t
axpy_cpu	src/blas.cpp	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
back	src/list.h	/^    node *back;$/;"	m	struct:list
background	src/data.h	/^    int background;$/;"	m	struct:load_args
background	src/layer.h	/^    int background;$/;"	m	struct:layer
backward	src/layer.h	/^    void (*backward)(struct layer, struct network_state);$/;"	m	struct:layer
backward_activation_layer	src/activation_layer.cpp	/^void backward_activation_layer(layer l, network_state state)$/;"	f
backward_activation_layer_gpu	src/activation_layer.cpp	/^void backward_activation_layer_gpu(layer l, network_state state)$/;"	f
backward_avgpool_layer	src/avgpool_layer.cpp	/^void backward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
backward_batchnorm_layer	src/batchnorm_layer.cpp	/^void backward_batchnorm_layer(const layer l, network_state state)$/;"	f
backward_batchnorm_layer_gpu	src/batchnorm_layer.cpp	/^void backward_batchnorm_layer_gpu(const layer l, network_state state)$/;"	f
backward_bias	src/convolutional_layer.cpp	/^void backward_bias(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_connected_layer	src/connected_layer.cpp	/^void backward_connected_layer(connected_layer l, network_state state)$/;"	f
backward_connected_layer_gpu	src/connected_layer.cpp	/^void backward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
backward_convolutional_layer	src/convolutional_layer.cpp	/^void backward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
backward_cost_layer	src/cost_layer.cpp	/^void backward_cost_layer(const cost_layer l, network_state state)$/;"	f
backward_cost_layer_gpu	src/cost_layer.cpp	/^void backward_cost_layer_gpu(const cost_layer l, network_state state)$/;"	f
backward_crnn_layer	src/crnn_layer.cpp	/^void backward_crnn_layer(layer l, network_state state)$/;"	f
backward_crnn_layer_gpu	src/crnn_layer.cpp	/^void backward_crnn_layer_gpu(layer l, network_state state)$/;"	f
backward_crop_layer	src/crop_layer.cpp	/^void backward_crop_layer(const crop_layer l, network_state state){}$/;"	f
backward_crop_layer_gpu	src/crop_layer.cpp	/^void backward_crop_layer_gpu(const crop_layer l, network_state state){}$/;"	f
backward_deconvolutional_layer	src/deconvolutional_layer.cpp	/^void backward_deconvolutional_layer(deconvolutional_layer l, network_state state)$/;"	f
backward_detection_layer	src/detection_layer.cpp	/^void backward_detection_layer(const detection_layer l, network_state state)$/;"	f
backward_detection_layer_gpu	src/detection_layer.cpp	/^void backward_detection_layer_gpu(detection_layer l, network_state state)$/;"	f
backward_dropout_layer	src/dropout_layer.cpp	/^void backward_dropout_layer(dropout_layer l, network_state state)$/;"	f
backward_gpu	src/layer.h	/^    void (*backward_gpu)(struct layer, struct network_state);$/;"	m	struct:layer
backward_gru_layer	src/gru_layer.cpp	/^void backward_gru_layer(layer l, network_state state)$/;"	f
backward_gru_layer_gpu	src/gru_layer.cpp	/^void backward_gru_layer_gpu(layer l, network_state state)$/;"	f
backward_local_layer	src/local_layer.cpp	/^void backward_local_layer(local_layer l, network_state state)$/;"	f
backward_local_layer_gpu	src/local_layer.cpp	/^void backward_local_layer_gpu(local_layer l, network_state state)$/;"	f
backward_maxpool_layer	src/maxpool_layer.cpp	/^void backward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
backward_network	src/network.cpp	/^void backward_network(network net, network_state state)$/;"	f
backward_normalization_layer	src/normalization_layer.cpp	/^void backward_normalization_layer(const layer layer, network_state state)$/;"	f
backward_normalization_layer_gpu	src/normalization_layer.cpp	/^void backward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
backward_region_layer	src/region_layer.cpp	/^void backward_region_layer(const layer l, network_state state)$/;"	f
backward_region_layer_gpu	src/region_layer.cpp	/^void backward_region_layer_gpu(layer l, network_state state)$/;"	f
backward_reorg_layer	src/reorg_layer.cpp	/^void backward_reorg_layer(const layer l, network_state state)$/;"	f
backward_reorg_layer_gpu	src/reorg_layer.cpp	/^void backward_reorg_layer_gpu(layer l, network_state state)$/;"	f
backward_rnn_layer	src/rnn_layer.cpp	/^void backward_rnn_layer(layer l, network_state state)$/;"	f
backward_rnn_layer_gpu	src/rnn_layer.cpp	/^void backward_rnn_layer_gpu(layer l, network_state state)$/;"	f
backward_route_layer	src/route_layer.cpp	/^void backward_route_layer(const route_layer l, network_state state)$/;"	f
backward_route_layer_gpu	src/route_layer.cpp	/^void backward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
backward_scale_cpu	src/batchnorm_layer.cpp	/^void backward_scale_cpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_shortcut_layer	src/shortcut_layer.cpp	/^void backward_shortcut_layer(const layer l, network_state state)$/;"	f
backward_shortcut_layer_gpu	src/shortcut_layer.cpp	/^void backward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
backward_softmax_layer	src/softmax_layer.cpp	/^void backward_softmax_layer(const softmax_layer l, network_state state)$/;"	f
backward_softmax_layer_gpu	src/softmax_layer.cpp	/^void backward_softmax_layer_gpu(const softmax_layer layer, network_state state)$/;"	f
basecfg	src/utils.cpp	/^char *basecfg(char *cfgfile)$/;"	f
batch	src/layer.h	/^    int batch;$/;"	m	struct:layer
batch	src/network.h	/^    int batch;$/;"	m	struct:network
batch	src/parser.cpp	/^    int batch;$/;"	m	struct:size_params	file:
batch_normalize	src/layer.h	/^    int batch_normalize;$/;"	m	struct:layer
bbox	src/track.h	/^    cv::Rect bbox;$/;"	m	class:Track
bbox_comparator	app/darknet/compare.cpp	/^int bbox_comparator(const void *a, const void *b)$/;"	f
bbox_fight	app/darknet/compare.cpp	/^void bbox_fight(network net, sortable_bbox *a, sortable_bbox *b, int classes, int class_)$/;"	f
bbox_update	app/darknet/compare.cpp	/^void bbox_update(sortable_bbox *a, sortable_bbox *b, int class_, int result)$/;"	f
bd_algo	src/layer.h	/^    cudnnConvolutionBwdDataAlgo_t bd_algo;$/;"	m	struct:layer
best_3d_shift	src/image.cpp	/^int best_3d_shift(image a, image b, int min, int max)$/;"	f
best_3d_shift_r	src/image.cpp	/^int best_3d_shift_r(image a, image b, int min, int max)$/;"	f
beta	src/layer.h	/^    float beta;$/;"	m	struct:layer
bf_algo	src/layer.h	/^    cudnnConvolutionBwdFilterAlgo_t bf_algo;$/;"	m	struct:layer
bgindex	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon20
bias_match	src/layer.h	/^    int bias_match;$/;"	m	struct:layer
bias_updates	src/layer.h	/^    float *bias_updates;$/;"	m	struct:layer
bias_updates_gpu	src/layer.h	/^    float * bias_updates_gpu;$/;"	m	struct:layer
biases	src/layer.h	/^    float *biases;$/;"	m	struct:layer
biases_gpu	src/layer.h	/^    float * biases_gpu;$/;"	m	struct:layer
bilinear_interpolate	src/image.cpp	/^float bilinear_interpolate(image im, float x, float y, int c)$/;"	f
binarize_cpu	src/convolutional_layer.cpp	/^void binarize_cpu(float *input, int n, float *binary)$/;"	f
binarize_image	src/image.cpp	/^image binarize_image(image im)$/;"	f
binarize_input	src/convolutional_layer.cpp	/^void binarize_input(float *input, int n, int size, float *binary)$/;"	f
binarize_weights	src/convolutional_layer.cpp	/^void binarize_weights(float *weights, int n, int size, float *binary)$/;"	f
binary	src/layer.h	/^    int binary;$/;"	m	struct:layer
binary_input	src/layer.h	/^    float *binary_input;$/;"	m	struct:layer
binary_input_gpu	src/layer.h	/^    float *binary_input_gpu;$/;"	m	struct:layer
binary_weights	src/layer.h	/^    float *binary_weights;$/;"	m	struct:layer
binary_weights_gpu	src/layer.h	/^    float *binary_weights_gpu;$/;"	m	struct:layer
blas_handle	src/cuda.cpp	/^cublasHandle_t blas_handle()$/;"	f
blend_image	src/image.cpp	/^image blend_image(image fore, image back, float alpha)$/;"	f
blobSender	src/blobSender.cpp	/^blobSender::blobSender(const char* const address, int port) {$/;"	f	class:blobSender
blobSender	src/blobSender.h	/^class blobSender {$/;"	c
board_to_string	app/darknet/go.cpp	/^void board_to_string(char *s, float *board)$/;"	f
border_image	src/image.cpp	/^image border_image(image a, int border)$/;"	f
bottom	src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon25
bounding_box	yolo++/object.h	/^    cv::Rect bounding_box;$/;"	m	struct:DetectedObject
bounding_height	src/blob.h	/^    int bounding_height;$/;"	m	struct:Blob
bounding_width	src/blob.h	/^    int bounding_width;$/;"	m	struct:Blob
bounding_x	src/blob.h	/^    int bounding_x;$/;"	m	struct:Blob
bounding_y	src/blob.h	/^    int bounding_y;$/;"	m	struct:Blob
box	src/box.h	/^    box():x(0.f), y(0.f), w(0.f), h(0.f){}$/;"	f	struct:box
box	src/box.h	/^    box(float x, float y, float w, float h):x(x), y(y), w(w), h(h){}$/;"	f	struct:box
box	src/box.h	/^struct box{$/;"	s
box_intersection	src/box.cpp	/^float box_intersection(box a, box b)$/;"	f
box_iou	src/box.cpp	/^float box_iou(box a, box b)$/;"	f
box_label	src/data.h	/^} box_label;$/;"	t	typeref:struct:__anon25
box_rmse	src/box.cpp	/^float box_rmse(box a, box b)$/;"	f
box_union	src/box.cpp	/^float box_union(box a, box b)$/;"	f
boxes	app/darknet/demo.cpp	/^static box *boxes;$/;"	v	file:
boxes	src/data.h	/^    box **boxes;$/;"	m	struct:__anon23
buffer_start	src/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon7
buflen	src/stb_image.h	/^   int buflen;$/;"	m	struct:__anon7
burn_in	src/network.h	/^    int burn_in;$/;"	m	struct:network
c	src/image.h	/^    int c;$/;"	m	struct:image
c	src/layer.h	/^    int h, w, c;$/;"	m	struct:layer
c	src/network.h	/^    int h, w, c;$/;"	m	struct:network
c	src/parser.cpp	/^    int c;$/;"	m	struct:size_params	file:
calcCentroid	src/track.cpp	/^cv::Point calcCentroid(DetectedObject& contour) {$/;"	f
calcCentroidDiff	src/track.cpp	/^cv::Point calcCentroidDiff(Contour& contour) {$/;"	f
calculate_liberties	app/darknet/go.cpp	/^int *calculate_liberties(float *board)$/;"	f
calculate_loss	src/nightmare.cpp	/^void calculate_loss(float *output, float *delta, int n, float thresh)$/;"	f
camDefined	src/camera.h	/^	bool camDefined;$/;"	m	class:Camera
cameraID	src/blob.h	/^    size_t cameraID;$/;"	m	struct:Blob
cameras	app/darknet/config.h	/^    std::unordered_map<int, CameraInfo> cameras;$/;"	m	class:Config
cameras	src/config.h	/^    std::unordered_map<int, CameraInfo> cameras;$/;"	m	class:Config
cap	app/darknet/demo.cpp	/^static CvCapture * cap;$/;"	v	file:
cfgfile	yolo++/yolo.h	/^    const char *cfgfile;$/;"	m	class:Yolo
change_leaves	src/tree.cpp	/^void change_leaves(tree *t, char *leaf_list)$/;"	f
channel	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon18
check_error	src/cuda.cpp	/^void check_error(cudaError_t status)$/;"	f
child	src/tree.h	/^    int *child;$/;"	m	struct:__anon32
className	app/darknet/config.h	/^    std::string className;$/;"	m	struct:CameraInfo
className	src/config.h	/^    std::string className;$/;"	m	struct:CameraInfo
class_	app/darknet/compare.cpp	/^    int class_;$/;"	m	struct:__anon2	file:
class_	src/box.cpp	/^    int class_;$/;"	m	struct:__anon30	file:
class_scale	src/layer.h	/^    float class_scale;$/;"	m	struct:layer
classes	app/darknet/compare.cpp	/^    int classes;$/;"	m	struct:__anon2	file:
classes	src/data.h	/^    int classes;$/;"	m	struct:load_args
classes	src/layer.h	/^    int classes;$/;"	m	struct:layer
classfix	src/layer.h	/^    int classfix;$/;"	m	struct:layer
coco_classes	src/coco.cpp	/^char *coco_classes[] = {"person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"};$/;"	v
coco_ids	app/darknet/detector.cpp	/^static int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v	file:
coco_ids	src/coco.cpp	/^int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v
code	src/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon9
code_bits	src/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon10
code_buffer	src/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon10
code_buffer	src/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon14
codes	src/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon20
coeff	src/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon10::__anon11
coeff_h	src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon10::__anon11
coeff_w	src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon10::__anon11
col2im_add_pixel	src/col2im.cpp	/^void col2im_add_pixel(float *im, int height, int width, int channels,$/;"	f
col2im_cpu	src/col2im.cpp	/^void col2im_cpu(float* data_col,$/;"	f
col_image	src/layer.h	/^    float *col_image;$/;"	m	struct:layer
col_image_gpu	src/layer.h	/^    float * col_image_gpu;$/;"	m	struct:layer
collapse_image_layers	src/image.cpp	/^image collapse_image_layers(image source, int border)$/;"	f
collapse_images_horz	src/image.cpp	/^image collapse_images_horz(image *ims, int n)$/;"	f
collapse_images_vert	src/image.cpp	/^image collapse_images_vert(image *ims, int n)$/;"	f
color_table	src/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon20
colors	src/image.cpp	/^float colors[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };$/;"	v
cols	src/matrix.h	/^    int rows, cols;$/;"	m	struct:matrix
combineContours	src/objecttracker.cpp	/^std::vector<Contour> combineContours(std::vector<Contour>& contours) {$/;"	f
compare_networks	src/network.cpp	/^void compare_networks(network n1, network n2, data test)$/;"	f
composite_3d	src/image.cpp	/^void composite_3d(char *f1, char *f2, char *out, int delta)$/;"	f
composite_image	src/image.cpp	/^void composite_image(image source, image dest, int dx, int dy)$/;"	f
concat	src/layer.h	/^    float *concat;$/;"	m	struct:layer
concat_data	src/data.cpp	/^data concat_data(data d1, data d2)$/;"	f
concat_datas	src/data.cpp	/^data concat_datas(data *d, int n)$/;"	f
concat_delta	src/layer.h	/^    float *concat_delta;$/;"	m	struct:layer
concat_delta_gpu	src/layer.h	/^    float * concat_delta_gpu;$/;"	m	struct:layer
concat_gpu	src/layer.h	/^    float * concat_gpu;$/;"	m	struct:layer
concat_matrix	src/data.cpp	/^matrix concat_matrix(matrix m1, matrix m2)$/;"	f
connected_layer	src/connected_layer.h	/^typedef layer connected_layer;$/;"	t
const_cpu	src/blas.cpp	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
constrain	src/utils.cpp	/^float constrain(float min, float max, float a)$/;"	f
constrain_image	src/image.cpp	/^void constrain_image(image im)$/;"	f
constrain_int	src/utils.cpp	/^int constrain_int(int a, int min, int max)$/;"	f
contour	src/track.h	/^    DetectedObject contour;$/;"	m	class:Track
contourDiff	src/track.h	/^    Contour contourDiff;$/;"	m	class:Track
contourFilter	src/difference.cpp	/^bool contourFilter(Contour& contour) {$/;"	f
contourMaxArea	src/difference.cpp	/^const double contourMaxArea = 50000.0;$/;"	v
contourMinArea	src/difference.cpp	/^const double contourMinArea = 800.0;$/;"	v
contourThickness	src/display.cpp	/^const int contourThickness = 2;$/;"	v
convDesc	src/layer.h	/^    cudnnConvolutionDescriptor_t convDesc;$/;"	m	struct:layer
convolutional_layer	src/convolutional_layer.h	/^typedef layer convolutional_layer;$/;"	t
convolutional_out_height	src/convolutional_layer.cpp	/^int convolutional_out_height(convolutional_layer l)$/;"	f
convolutional_out_width	src/convolutional_layer.cpp	/^int convolutional_out_width(convolutional_layer l)$/;"	f
coord_scale	src/layer.h	/^    float coord_scale;$/;"	m	struct:layer
coords	src/layer.h	/^    int coords;$/;"	m	struct:layer
copy_cpu	src/blas.cpp	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_image	src/image.cpp	/^image copy_image(image p)$/;"	f
copy_string	src/utils.cpp	/^char *copy_string(char *s)$/;"	f
correct_boxes	src/data.cpp	/^void correct_boxes(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)$/;"	f
cost	src/layer.h	/^    float *cost;$/;"	m	struct:layer
costChangeAssignment	src/track.h	/^    static const int costChangeAssignment = 200;$/;"	m	class:Track
costNonassignment	src/track.h	/^    static const int costNonassignment = 100;$/;"	m	class:Track
cost_layer	src/cost_layer.h	/^typedef layer cost_layer;$/;"	t
cost_type	src/layer.h	/^    COST_TYPE cost_type;$/;"	m	struct:layer
countInitialStart	src/objecttracker.cpp	/^int countInitialStart=0;$/;"	v
count_fields	src/utils.cpp	/^int count_fields(char *line)$/;"	f
crop	app/darknet/camera.h	/^    cv::Rect crop;$/;"	m	class:Camera
crop	app/darknet/config.h	/^    cv::Rect crop;$/;"	m	struct:CameraInfo
crop	src/camera.h	/^    cv::Rect crop;$/;"	m	class:Camera
crop	src/config.h	/^    cv::Rect crop;$/;"	m	struct:CameraInfo
crop_image	src/image.cpp	/^image crop_image(image im, int dx, int dy, int w, int h)$/;"	f
crop_layer	src/crop_layer.h	/^typedef layer crop_layer;$/;"	t
cropping	app/darknet/camera.h	/^    bool cropping;$/;"	m	class:Camera
cropping	src/camera.h	/^    bool cropping;$/;"	m	class:Camera
csv_to_matrix	src/matrix.cpp	/^matrix csv_to_matrix(char *filename)$/;"	f
cuda_compare	src/cuda.cpp	/^float cuda_compare(float *x_gpu, float *x, size_t n, char *s)$/;"	f
cuda_free	src/cuda.cpp	/^void cuda_free(float *x_gpu)$/;"	f
cuda_get_device	src/cuda.cpp	/^int cuda_get_device()$/;"	f
cuda_gridsize	src/cuda.cpp	/^dim3 cuda_gridsize(size_t n){$/;"	f
cuda_make_array	src/cuda.cpp	/^float *cuda_make_array(float *x, size_t n)$/;"	f
cuda_make_int_array	src/cuda.cpp	/^int *cuda_make_int_array(size_t n)$/;"	f
cuda_pull_array	src/cuda.cpp	/^void cuda_pull_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_push_array	src/cuda.cpp	/^void cuda_push_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_random	src/cuda.cpp	/^void cuda_random(float *x_gpu, size_t n)$/;"	f
cuda_set_device	src/cuda.cpp	/^void cuda_set_device(int n)$/;"	f
cudnn_convolutional_setup	src/convolutional_layer.cpp	/^void cudnn_convolutional_setup(layer *l)$/;"	f
cudnn_handle	src/cuda.cpp	/^cudnnHandle_t cudnn_handle()$/;"	f
cur_x	src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon20
cur_y	src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon20
current_class	app/darknet/compare.cpp	/^int current_class = 0;$/;"	v
cweights	src/layer.h	/^    char *cweights;$/;"	m	struct:layer
d	src/data.h	/^    data *d;$/;"	m	struct:load_args
data	app/darknet/go.cpp	/^    char **data;$/;"	m	struct:__anon4	file:
data	src/data.h	/^} data;$/;"	t	typeref:struct:__anon23
data	src/image.h	/^    float *data;$/;"	m	struct:image
data	src/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon10::__anon11
data_type	src/data.h	/^} data_type;$/;"	t	typeref:enum:__anon24
datacfg	yolo++/yolo.h	/^    const char *datacfg;$/;"	m	class:Yolo
dbox	src/box.h	/^} dbox;$/;"	t	typeref:struct:__anon29
dc_pred	src/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon10::__anon11
dct_bfly32o	src/stb_image.h	2044;"	d
dct_bfly32o	src/stb_image.h	2178;"	d
dct_bfly32o	src/stb_image.h	2230;"	d
dct_bfly32o	src/stb_image.h	2388;"	d
dct_const	src/stb_image.h	2016;"	d
dct_const	src/stb_image.h	2173;"	d
dct_interleave16	src/stb_image.h	2061;"	d
dct_interleave16	src/stb_image.h	2180;"	d
dct_interleave8	src/stb_image.h	2055;"	d
dct_interleave8	src/stb_image.h	2179;"	d
dct_long_mac	src/stb_image.h	2211;"	d
dct_long_mac	src/stb_image.h	2384;"	d
dct_long_mul	src/stb_image.h	2207;"	d
dct_long_mul	src/stb_image.h	2383;"	d
dct_pass	src/stb_image.h	2066;"	d
dct_pass	src/stb_image.h	2181;"	d
dct_pass	src/stb_image.h	2238;"	d
dct_pass	src/stb_image.h	2389;"	d
dct_rot	src/stb_image.h	2020;"	d
dct_rot	src/stb_image.h	2174;"	d
dct_trn16	src/stb_image.h	2298;"	d
dct_trn16	src/stb_image.h	2320;"	d
dct_trn32	src/stb_image.h	2299;"	d
dct_trn32	src/stb_image.h	2321;"	d
dct_trn64	src/stb_image.h	2300;"	d
dct_trn64	src/stb_image.h	2322;"	d
dct_trn8_16	src/stb_image.h	2344;"	d
dct_trn8_16	src/stb_image.h	2379;"	d
dct_trn8_32	src/stb_image.h	2345;"	d
dct_trn8_32	src/stb_image.h	2380;"	d
dct_trn8_8	src/stb_image.h	2343;"	d
dct_trn8_8	src/stb_image.h	2378;"	d
dct_wadd	src/stb_image.h	2034;"	d
dct_wadd	src/stb_image.h	2176;"	d
dct_wadd	src/stb_image.h	2220;"	d
dct_wadd	src/stb_image.h	2386;"	d
dct_widen	src/stb_image.h	2029;"	d
dct_widen	src/stb_image.h	2175;"	d
dct_widen	src/stb_image.h	2215;"	d
dct_widen	src/stb_image.h	2385;"	d
dct_wsub	src/stb_image.h	2039;"	d
dct_wsub	src/stb_image.h	2177;"	d
dct_wsub	src/stb_image.h	2225;"	d
dct_wsub	src/stb_image.h	2387;"	d
ddstTensorDesc	src/layer.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
decay	src/network.h	/^    float decay;$/;"	m	struct:network
decode_box	src/box.cpp	/^box decode_box(box b, box anchor)$/;"	f
deconvolutional_layer	src/deconvolutional_layer.h	/^typedef layer deconvolutional_layer;$/;"	t
deconvolutional_out_height	src/deconvolutional_layer.cpp	/^int deconvolutional_out_height(deconvolutional_layer l)$/;"	f
deconvolutional_out_size	src/deconvolutional_layer.cpp	/^int deconvolutional_out_size(deconvolutional_layer l)$/;"	f
deconvolutional_out_width	src/deconvolutional_layer.cpp	/^int deconvolutional_out_width(deconvolutional_layer l)$/;"	f
del_arg	src/utils.cpp	/^void del_arg(int argc, char **argv, int index)$/;"	f
deletedTracks	src/objecttracker.h	/^    std::unordered_set<int> deletedTracks;$/;"	m	class:ObjectTracker
delta	src/layer.h	/^    float *delta;$/;"	m	struct:layer
delta	src/network.h	/^    float *delta;$/;"	m	struct:network_state
delta	src/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon9
delta_gpu	src/layer.h	/^    float * delta_gpu;$/;"	m	struct:layer
delta_region_box	src/region_layer.cpp	/^float delta_region_box(box truth, float *x, float *biases, int n, int index, int i, int j, int w, int h, float *delta, float scale)$/;"	f
delta_region_class	src/region_layer.cpp	/^void delta_region_class(float *output, float *delta, int index, int class_, int classes, tree *hier, float scale, float *avg_cat)$/;"	f
demo	app/darknet/demo.cpp	/^void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int frame_skip, char *prefix, float hier_thresh)$/;"	f
demo_alphabet	app/darknet/demo.cpp	/^static image **demo_alphabet;$/;"	v	file:
demo_art	app/darknet/art.cpp	/^void demo_art(char *cfgfile, char *weightfile, int cam_index)$/;"	f
demo_classes	app/darknet/demo.cpp	/^static int demo_classes;$/;"	v	file:
demo_classifier	src/classifier.cpp	/^void demo_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
demo_hier_thresh	app/darknet/demo.cpp	/^static float demo_hier_thresh = .5;$/;"	v	file:
demo_index	app/darknet/demo.cpp	/^static int demo_index = 0;$/;"	v	file:
demo_names	app/darknet/demo.cpp	/^static char **demo_names;$/;"	v	file:
demo_thresh	app/darknet/demo.cpp	/^static float demo_thresh = 0;$/;"	v	file:
denormalize_connected_layer	src/connected_layer.cpp	/^void denormalize_connected_layer(layer l)$/;"	f
denormalize_convolutional_layer	src/convolutional_layer.cpp	/^void denormalize_convolutional_layer(convolutional_layer l)$/;"	f
denormalize_net	app/darknet/darknet.cpp	/^void denormalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
dequant	src/stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon10
derivative	src/box.cpp	/^dbox derivative(box a, box b)$/;"	f
description	app/darknet/config.h	/^    std::string description;$/;"	m	struct:CameraInfo
description	src/config.h	/^    std::string description;$/;"	m	struct:CameraInfo
det	app/darknet/demo.cpp	/^static image det  ;$/;"	v	file:
det_s	app/darknet/demo.cpp	/^static image det_s;$/;"	v	file:
detect	yolo++/yolo.cpp	/^void Yolo::detect(const cv::Mat& img, std::vector<DetectedObject>& detection,bool flag)const$/;"	f	class:Yolo
detect_in_thread	app/darknet/demo.cpp	/^void *detect_in_thread(void *ptr)$/;"	f
detectionFilter	app/darknet++/darknet++.cpp	/^void detectionFilter(std::vector<DetectedObject>& detections)$/;"	f
detection_layer	src/detection_layer.h	/^typedef layer detection_layer;$/;"	t
dh	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon29
dice_labels	app/darknet/dice.cpp	/^char *dice_labels[] = {"face1","face2","face3","face4","face5","face6"};$/;"	v
diffEngine	src/difference.h	/^    cv::Ptr<cv::BackgroundSubtractor> diffEngine;$/;"	m	class:DifferenceTracker
dintersect	src/box.cpp	/^dbox dintersect(box a, box b)$/;"	f
diou	src/box.cpp	/^dbox diou(box a, box b)$/;"	f
disp	app/darknet/demo.cpp	/^static image disp = {0};$/;"	v	file:
dist_array	src/utils.cpp	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f
distance_from_edge	src/data.h	/^static inline float distance_from_edge(int x, int max) {$/;"	f
distort_image	src/image.cpp	/^void distort_image(image im, float hue, float sat, float val)$/;"	f
do_nms	src/box.cpp	/^void do_nms(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_obj	src/box.cpp	/^void do_nms_obj(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_sort	src/box.cpp	/^void do_nms_sort(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
does_cost	src/layer.h	/^    int does_cost;$/;"	m	struct:layer
dontload	src/layer.h	/^    int dontload;$/;"	m	struct:layer
dontloadscales	src/layer.h	/^    int dontloadscales;$/;"	m	struct:layer
dot	src/layer.h	/^    float dot;$/;"	m	struct:layer
dot_cpu	src/blas.cpp	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
drawTracks	src/display.cpp	/^void drawTracks(cv::Mat& image, const Tracks& tracks, cv::Point& mousePos,const Spawns& spawns, double fps, bool paused) {$/;"	f
draw_bbox	src/image.cpp	/^void draw_bbox(image a, box bbox, int w, float r, float g, float b)$/;"	f
draw_box	src/image.cpp	/^void draw_box(image a, int x1, int y1, int x2, int y2, float r, float g, float b)$/;"	f
draw_box_width	src/image.cpp	/^void draw_box_width(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)$/;"	f
draw_detections	src/image.cpp	/^void draw_detections(image im, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)$/;"	f
draw_label	src/image.cpp	/^void draw_label(image a, int r, int c, image label, const float *rgb)$/;"	f
dropout_layer	src/dropout_layer.h	/^typedef layer dropout_layer;$/;"	t
dsrcTensorDesc	src/layer.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
dstTensorDesc	src/layer.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
dunion	src/box.cpp	/^dbox dunion(box a, box b)$/;"	f
dw	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon29
dweightDesc	src/layer.h	/^    cudnnFilterDescriptor_t dweightDesc;$/;"	m	struct:layer
dx	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon29
dy	src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon29
eflags	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon20
elo	app/darknet/compare.cpp	/^    float elo;$/;"	m	struct:__anon2	file:
elo_comparator	app/darknet/compare.cpp	/^int elo_comparator(const void*a, const void *b)$/;"	f
elos	app/darknet/compare.cpp	/^    float *elos;$/;"	m	struct:__anon2	file:
elu_activate	src/activations.h	/^static inline float elu_activate(float x){return (x >= 0)*x + (x < 0)*(exp(x)-1);}$/;"	f
elu_gradient	src/activations.h	/^static inline float elu_gradient(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
embed_image	src/image.cpp	/^void embed_image(image source, image dest, int dx, int dy)$/;"	f
encode_box	src/box.cpp	/^box encode_box(box b, box anchor)$/;"	f
engine_go	app/darknet/go.cpp	/^void engine_go(char *filename, char *weightfile, int multi)$/;"	f
eob_run	src/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon10
eof	src/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon6
epoch	src/network.h	/^    float epoch;$/;"	m	struct:network
eps	src/layer.h	/^    float eps;$/;"	m	struct:layer
eps	src/network.h	/^    float eps;$/;"	m	struct:network
error	src/utils.cpp	/^void error(const char *s)$/;"	f
eval_cifar_csv	app/darknet/cifar.cpp	/^void eval_cifar_csv()$/;"	f
expanded	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon16
exposure	src/data.h	/^    float exposure;$/;"	m	struct:load_args
exposure	src/layer.h	/^    float exposure;$/;"	m	struct:layer
exposure	src/network.h	/^    float exposure;$/;"	m	struct:network
exposure_image	src/image.cpp	/^void exposure_image(image im, float sat)$/;"	f
extract_cifar	app/darknet/cifar.cpp	/^void extract_cifar()$/;"	f
extract_voxel	app/darknet/voxel.cpp	/^void extract_voxel(char *lfile, char *rfile, char *prefix)$/;"	f
fast	src/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon13
fast	src/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon9
fast_ac	src/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon10
features	build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
fetch_in_thread	app/darknet/demo.cpp	/^void *fetch_in_thread(void *ptr)$/;"	f
fgetgo	app/darknet/go.cpp	/^char *fgetgo(FILE *fp)$/;"	f
fgetl	src/utils.cpp	/^char *fgetl(FILE *fp)$/;"	f
file	app/darknet/config.h	/^    cv::FileStorage file;$/;"	m	class:Config
file	src/config.h	/^    cv::FileStorage file;$/;"	m	class:Config
file_error	src/utils.cpp	/^void file_error(char *s)$/;"	f
filename	app/darknet/compare.cpp	/^    char *filename;$/;"	m	struct:__anon2	file:
fill_cpu	src/blas.cpp	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_hierarchy	src/data.cpp	/^void fill_hierarchy(float *truth, int k, tree *hierarchy)$/;"	f
fill_truth	src/data.cpp	/^void fill_truth(char *path, char **labels, int k, float *truth)$/;"	f
fill_truth_captcha	src/data.cpp	/^void fill_truth_captcha(char *path, int n, float *truth)$/;"	f
fill_truth_detection	src/data.cpp	/^void fill_truth_detection(char *path, int num_boxes, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_region	src/data.cpp	/^void fill_truth_region(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_swag	src/data.cpp	/^void fill_truth_swag(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
find_arg	src/utils.cpp	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_char_arg	src/utils.cpp	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_float_arg	src/utils.cpp	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_int_arg	src/utils.cpp	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_replace	src/utils.cpp	/^void find_replace(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_paths	src/data.cpp	/^char **find_replace_paths(char **paths, int n, char *find, char *replace)$/;"	f
first	src/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon19
first_row_filter	src/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	src/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon13
firstsymbol	src/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon13
fix_data_captcha	src/captcha.cpp	/^void fix_data_captcha(data d, int mask)$/;"	f
flags	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon20
flatten	src/blas.cpp	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f
flip	src/layer.h	/^    int flip;$/;"	m	struct:layer
flip_board	app/darknet/go.cpp	/^void flip_board(float *board)$/;"	f
flip_image	src/image.cpp	/^void flip_image(image a)$/;"	f
flipped	src/layer.h	/^    int flipped;$/;"	m	struct:layer
float2fixed	src/stb_image.h	3043;"	d
float2fixed	src/stb_image.h	3071;"	d
float_abs_compare	src/cost_layer.cpp	/^int float_abs_compare (const void * a, const void * b)$/;"	f
float_pair	app/darknet/rnn.cpp	/^} float_pair;$/;"	t	typeref:struct:__anon1	file:
float_pair	app/darknet/rnn_vid.cpp	/^} float_pair;$/;"	t	typeref:struct:__anon3	file:
float_to_box	src/box.cpp	/^box float_to_box(float *f)$/;"	f
float_to_image	src/image.cpp	/^image float_to_image(int w, int h, int c, float *data)$/;"	f
font	data/labels/make_labels.py	/^font = 'futura-normal'$/;"	v
forced	src/layer.h	/^    int forced;$/;"	m	struct:layer
forgot_delta	src/layer.h	/^    float *forgot_delta;$/;"	m	struct:layer
forgot_delta_gpu	src/layer.h	/^    float * forgot_delta_gpu;$/;"	m	struct:layer
forgot_state	src/layer.h	/^    float *forgot_state;$/;"	m	struct:layer
forgot_state_gpu	src/layer.h	/^    float * forgot_state_gpu;$/;"	m	struct:layer
forward	src/layer.h	/^    void (*forward)(struct layer, struct network_state);$/;"	m	struct:layer
forward_activation_layer	src/activation_layer.cpp	/^void forward_activation_layer(layer l, network_state state)$/;"	f
forward_activation_layer_gpu	src/activation_layer.cpp	/^void forward_activation_layer_gpu(layer l, network_state state)$/;"	f
forward_avgpool_layer	src/avgpool_layer.cpp	/^void forward_avgpool_layer(const avgpool_layer l, network_state state)$/;"	f
forward_batchnorm_layer	src/batchnorm_layer.cpp	/^void forward_batchnorm_layer(layer l, network_state state)$/;"	f
forward_batchnorm_layer_gpu	src/batchnorm_layer.cpp	/^void forward_batchnorm_layer_gpu(layer l, network_state state)$/;"	f
forward_connected_layer	src/connected_layer.cpp	/^void forward_connected_layer(connected_layer l, network_state state)$/;"	f
forward_connected_layer_gpu	src/connected_layer.cpp	/^void forward_connected_layer_gpu(connected_layer l, network_state state)$/;"	f
forward_convolutional_layer	src/convolutional_layer.cpp	/^void forward_convolutional_layer(convolutional_layer l, network_state state)$/;"	f
forward_cost_layer	src/cost_layer.cpp	/^void forward_cost_layer(cost_layer l, network_state state)$/;"	f
forward_cost_layer_gpu	src/cost_layer.cpp	/^void forward_cost_layer_gpu(cost_layer l, network_state state)$/;"	f
forward_crnn_layer	src/crnn_layer.cpp	/^void forward_crnn_layer(layer l, network_state state)$/;"	f
forward_crnn_layer_gpu	src/crnn_layer.cpp	/^void forward_crnn_layer_gpu(layer l, network_state state)$/;"	f
forward_crop_layer	src/crop_layer.cpp	/^void forward_crop_layer(const crop_layer l, network_state state)$/;"	f
forward_deconvolutional_layer	src/deconvolutional_layer.cpp	/^void forward_deconvolutional_layer(const deconvolutional_layer l, network_state state)$/;"	f
forward_detection_layer	src/detection_layer.cpp	/^void forward_detection_layer(const detection_layer l, network_state state)$/;"	f
forward_detection_layer_gpu	src/detection_layer.cpp	/^void forward_detection_layer_gpu(const detection_layer l, network_state state)$/;"	f
forward_dropout_layer	src/dropout_layer.cpp	/^void forward_dropout_layer(dropout_layer l, network_state state)$/;"	f
forward_gpu	src/layer.h	/^    void (*forward_gpu)(struct layer, struct network_state);$/;"	m	struct:layer
forward_gru_layer	src/gru_layer.cpp	/^void forward_gru_layer(layer l, network_state state)$/;"	f
forward_gru_layer_gpu	src/gru_layer.cpp	/^void forward_gru_layer_gpu(layer l, network_state state)$/;"	f
forward_local_layer	src/local_layer.cpp	/^void forward_local_layer(const local_layer l, network_state state)$/;"	f
forward_local_layer_gpu	src/local_layer.cpp	/^void forward_local_layer_gpu(const local_layer l, network_state state)$/;"	f
forward_maxpool_layer	src/maxpool_layer.cpp	/^void forward_maxpool_layer(const maxpool_layer l, network_state state)$/;"	f
forward_network	src/network.cpp	/^void forward_network(network net, network_state state)$/;"	f
forward_normalization_layer	src/normalization_layer.cpp	/^void forward_normalization_layer(const layer layer, network_state state)$/;"	f
forward_normalization_layer_gpu	src/normalization_layer.cpp	/^void forward_normalization_layer_gpu(const layer layer, network_state state)$/;"	f
forward_region_layer	src/region_layer.cpp	/^void forward_region_layer(const layer l, network_state state)$/;"	f
forward_region_layer_gpu	src/region_layer.cpp	/^void forward_region_layer_gpu(const layer l, network_state state)$/;"	f
forward_reorg_layer	src/reorg_layer.cpp	/^void forward_reorg_layer(const layer l, network_state state)$/;"	f
forward_reorg_layer_gpu	src/reorg_layer.cpp	/^void forward_reorg_layer_gpu(layer l, network_state state)$/;"	f
forward_rnn_layer	src/rnn_layer.cpp	/^void forward_rnn_layer(layer l, network_state state)$/;"	f
forward_rnn_layer_gpu	src/rnn_layer.cpp	/^void forward_rnn_layer_gpu(layer l, network_state state)$/;"	f
forward_route_layer	src/route_layer.cpp	/^void forward_route_layer(const route_layer l, network_state state)$/;"	f
forward_route_layer_gpu	src/route_layer.cpp	/^void forward_route_layer_gpu(const route_layer l, network_state state)$/;"	f
forward_shortcut_layer	src/shortcut_layer.cpp	/^void forward_shortcut_layer(const layer l, network_state state)$/;"	f
forward_shortcut_layer_gpu	src/shortcut_layer.cpp	/^void forward_shortcut_layer_gpu(const layer l, network_state state)$/;"	f
forward_softmax_layer	src/softmax_layer.cpp	/^void forward_softmax_layer(const softmax_layer l, network_state state)$/;"	f
forward_softmax_layer_gpu	src/softmax_layer.cpp	/^void forward_softmax_layer_gpu(const softmax_layer l, network_state state)$/;"	f
fps	app/darknet/demo.cpp	/^static float fps = 0;$/;"	v	file:
fps	src/display.h	/^    FPS fps;$/;"	m	class:Display
free_data	src/data.cpp	/^void free_data(data d)$/;"	f
free_image	src/image.cpp	/^void free_image(image m)$/;"	f
free_layer	src/layer.cpp	/^void free_layer(layer l)$/;"	f
free_list	src/list.cpp	/^void free_list(list *l)$/;"	f
free_list_contents	src/list.cpp	/^void free_list_contents(list *l)$/;"	f
free_matrix	src/matrix.cpp	/^void free_matrix(matrix m)$/;"	f
free_network	src/network.cpp	/^void free_network(network net)$/;"	f
free_node	src/list.cpp	/^void free_node(node *n)$/;"	f
free_ptrs	src/utils.cpp	/^void free_ptrs(void **ptrs, int n)$/;"	f
free_section	src/parser.cpp	/^void free_section(section *s)$/;"	f
front	src/list.h	/^    node *front;$/;"	m	struct:list
fw_algo	src/layer.h	/^    cudnnConvolutionFwdAlgo_t fw_algo;$/;"	m	struct:layer
gamma	src/network.h	/^    float gamma;$/;"	m	struct:network
gate_delta_gpu	src/layer.h	/^    float * gate_delta_gpu;$/;"	m	struct:layer
gate_gpu	src/layer.h	/^    float * gate_gpu;$/;"	m	struct:layer
gemm	src/gemm.cpp	/^void gemm(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_bin	src/gemm.cpp	/^void gemm_bin(int M, int N, int K, float ALPHA, $/;"	f
gemm_cpu	src/gemm.cpp	/^void gemm_cpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_gpu	src/gemm.cpp	/^void gemm_gpu(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_nn	src/gemm.cpp	/^void gemm_nn(int M, int N, int K, float ALPHA, $/;"	f
gemm_nt	src/gemm.cpp	/^void gemm_nt(int M, int N, int K, float ALPHA, $/;"	f
gemm_ongpu	src/gemm.cpp	/^void gemm_ongpu(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_tn	src/gemm.cpp	/^void gemm_tn(int M, int N, int K, float ALPHA, $/;"	f
gemm_tt	src/gemm.cpp	/^void gemm_tt(int M, int N, int K, float ALPHA, $/;"	f
generate_move	app/darknet/go.cpp	/^int generate_move(network net, int player, float *board, int multi, float thresh, float temp, char *ko, int print)$/;"	f
generate_vid_rnn	app/darknet/rnn_vid.cpp	/^void generate_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
get	app/darknet/config.cpp	/^Config& Config::get() {$/;"	f	class:Config
get	src/config.cpp	/^Config& Config::get() {$/;"	f	class:Config
getAge	src/track.cpp	/^int Track::getAge() {$/;"	f	class:Track
getAssignCost	src/track.cpp	/^double getAssignCost(std::unique_ptr<Track>& track, DetectedObject& contour) {$/;"	f
getAssignCostDiff	src/track.cpp	/^double getAssignCostDiff(std::unique_ptr<Track>& track, Contour& contour) {$/;"	f
getBBox	src/track.cpp	/^const cv::Rect& Track::getBBox() {$/;"	f	class:Track
getCameraClassInfo	app/darknet/config.cpp	/^CameraClass Config::getCameraClassInfo(int camId) {$/;"	f	class:Config
getCameraClassInfo	app/darknet/config.cpp	/^CameraClass Config::getCameraClassInfo(std::string name) {$/;"	f	class:Config
getCameraClassInfo	src/config.cpp	/^CameraClass Config::getCameraClassInfo(int camId) {$/;"	f	class:Config
getCameraClassInfo	src/config.cpp	/^CameraClass Config::getCameraClassInfo(std::string name) {$/;"	f	class:Config
getCameraInfo	app/darknet/config.cpp	/^CameraInfo Config::getCameraInfo(int id) {$/;"	f	class:Config
getCameraInfo	src/config.cpp	/^CameraInfo Config::getCameraInfo(int id) {$/;"	f	class:Config
getContour	src/track.cpp	/^const DetectedObject& Track::getContour() {$/;"	f	class:Track
getContourDiff	src/track.cpp	/^const Contour& Track::getContourDiff() {$/;"	f	class:Track
getDeletedTracks	src/objecttracker.cpp	/^const std::unordered_set<int> ObjectTracker::getDeletedTracks() {$/;"	f	class:ObjectTracker
getFPS	src/display.cpp	/^double Display::FPS::getFPS() {$/;"	f	class:Display::FPS
getFrame	app/darknet/camera.cpp	/^bool Camera::getFrame(cv::Mat& frame) {$/;"	f	class:Camera
getFrame	src/camera.cpp	/^bool Camera::getFrame(cv::Mat& frame) {$/;"	f	class:Camera
getId	app/darknet/camera.cpp	/^int Camera::getId() {$/;"	f	class:Camera
getId	src/camera.cpp	/^int Camera::getId() {$/;"	f	class:Camera
getId	src/track.cpp	/^int Track::getId() {$/;"	f	class:Track
getInvisibleAge	src/track.cpp	/^int Track::getInvisibleAge() {$/;"	f	class:Track
getNames	yolo++/yolo.cpp	/^char** Yolo::getNames()$/;"	f	class:Yolo
getNextIndex	src/track.cpp	/^size_t Track::getNextIndex() {$/;"	f	class:Track
getPrediction	src/track.cpp	/^const TrackingData& Track::getPrediction() {$/;"	f	class:Track
getServerPort	app/darknet/config.cpp	/^int Config::getServerPort() {$/;"	f	class:Config
getServerPort	src/config.cpp	/^int Config::getServerPort() {$/;"	f	class:Config
getServerURL	app/darknet/config.cpp	/^std::string Config::getServerURL() {$/;"	f	class:Config
getServerURL	src/config.cpp	/^std::string Config::getServerURL() {$/;"	f	class:Config
getSpawns	src/camera.cpp	/^Spawns& Camera::getSpawns() {$/;"	f	class:Camera
getTracks	src/objecttracker.cpp	/^const Tracks& ObjectTracker::getTracks() {$/;"	f	class:ObjectTracker
getURL	app/darknet++/darknet++.cpp	/^std::string getURL(int camId) {$/;"	f
getVisibleCount	src/track.cpp	/^int Track::getVisibleCount() {$/;"	f	class:Track
get_activation	src/activations.cpp	/^ACTIVATION get_activation(char *s)$/;"	f
get_activation_string	src/activations.cpp	/^char *get_activation_string(ACTIVATION a)$/;"	f
get_coco_image_id	app/darknet/detector.cpp	/^static int get_coco_image_id(char *filename)$/;"	f	file:
get_coco_image_id	src/coco.cpp	/^int get_coco_image_id(char *filename)$/;"	f
get_color	src/image.cpp	/^float get_color(int c, int x, int max)$/;"	f
get_convolutional_delta	src/convolutional_layer.cpp	/^image get_convolutional_delta(convolutional_layer l)$/;"	f
get_convolutional_image	src/convolutional_layer.cpp	/^image get_convolutional_image(convolutional_layer l)$/;"	f
get_convolutional_weight	src/convolutional_layer.cpp	/^image get_convolutional_weight(convolutional_layer l, int i)$/;"	f
get_cost_string	src/cost_layer.cpp	/^char *get_cost_string(COST_TYPE a)$/;"	f
get_cost_type	src/cost_layer.cpp	/^COST_TYPE get_cost_type(char *s)$/;"	f
get_crop_image	src/crop_layer.cpp	/^image get_crop_image(crop_layer l)$/;"	f
get_current_batch	src/network.cpp	/^int get_current_batch(network net)$/;"	f
get_current_rate	src/network.cpp	/^float get_current_rate(network net)$/;"	f
get_data_part	src/data.cpp	/^data get_data_part(data d, int part, int total)$/;"	f
get_deconvolutional_delta	src/deconvolutional_layer.cpp	/^image get_deconvolutional_delta(deconvolutional_layer l)$/;"	f
get_deconvolutional_image	src/deconvolutional_layer.cpp	/^image get_deconvolutional_image(deconvolutional_layer l)$/;"	f
get_detection_boxes	src/detection_layer.cpp	/^void get_detection_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness)$/;"	f
get_hierarchy_probability	src/tree.cpp	/^float get_hierarchy_probability(float *x, tree *hier, int c)$/;"	f
get_image_from_stream	src/image.cpp	/^image get_image_from_stream(CvCapture *cap)$/;"	f
get_image_layer	src/image.cpp	/^image get_image_layer(image m, int l)$/;"	f
get_label	src/image.cpp	/^image get_label(image **characters, char *string, int size)$/;"	f
get_labels	src/data.cpp	/^char **get_labels(char *filename)$/;"	f
get_layer_string	src/network.cpp	/^char *get_layer_string(LAYER_TYPE a)$/;"	f
get_maxpool_delta	src/maxpool_layer.cpp	/^image get_maxpool_delta(maxpool_layer l)$/;"	f
get_maxpool_image	src/maxpool_layer.cpp	/^image get_maxpool_image(maxpool_layer l)$/;"	f
get_network_cost	src/network.cpp	/^float get_network_cost(network net)$/;"	f
get_network_detection_layer	src/network.cpp	/^detection_layer get_network_detection_layer(network net)$/;"	f
get_network_image	src/network.cpp	/^image get_network_image(network net)$/;"	f
get_network_image_layer	src/network.cpp	/^image get_network_image_layer(network net, int i)$/;"	f
get_network_input_size	src/network.cpp	/^int get_network_input_size(network net)$/;"	f
get_network_output	src/network.cpp	/^float *get_network_output(network net)$/;"	f
get_network_output_size	src/network.cpp	/^int get_network_output_size(network net)$/;"	f
get_next_batch	src/data.cpp	/^void get_next_batch(data d, int n, int offset, float *X, float *y)$/;"	f
get_paths	src/data.cpp	/^list *get_paths(char *filename)$/;"	f
get_pixel	src/image.cpp	/^float get_pixel(image m, int x, int y, int c)$/;"	f
get_pixel_extend	src/image.cpp	/^float get_pixel_extend(image m, int x, int y, int c)$/;"	f
get_policy	src/parser.cpp	/^learning_rate_policy get_policy(char *s)$/;"	f
get_predicted_class_network	src/network.cpp	/^int get_predicted_class_network(network net)$/;"	f
get_random_batch	src/data.cpp	/^void get_random_batch(data d, int n, float *X, float *y)$/;"	f
get_random_data	src/data.cpp	/^data get_random_data(data d, int num)$/;"	f
get_random_paths	src/data.cpp	/^char **get_random_paths(char **paths, int n, int m)$/;"	f
get_region_box	src/region_layer.cpp	/^box get_region_box(float *x, float *biases, int n, int index, int i, int j, int w, int h)$/;"	f
get_region_boxes	src/region_layer.cpp	/^void get_region_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness, int *map, float tree_thresh)$/;"	f
get_regression_values	src/classifier.cpp	/^float *get_regression_values(char **labels, int n)$/;"	f
get_rnn_data	app/darknet/rnn.cpp	/^float_pair get_rnn_data(unsigned char *text, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_token_data	app/darknet/rnn.cpp	/^float_pair get_rnn_token_data(int *tokens, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_vid_data	app/darknet/rnn_vid.cpp	/^float_pair get_rnn_vid_data(network net, char **files, int n, int batch, int steps)$/;"	f
get_wall_time	app/darknet/demo.cpp	/^double get_wall_time()$/;"	f
get_weights	src/convolutional_layer.cpp	/^image *get_weights(convolutional_layer l)$/;"	f
get_workspace_size	src/convolutional_layer.cpp	/^size_t get_workspace_size(layer l){$/;"	f
gpu_index	src/cuda.cpp	/^int gpu_index = 0;$/;"	v
gpu_index	src/network.h	/^    int gpu_index;$/;"	m	struct:network
gradient	src/activations.cpp	/^float gradient(float x, ACTIVATION a)$/;"	f
gradient_array	src/activations.cpp	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f
grayscale_image	src/image.cpp	/^image grayscale_image(image im)$/;"	f
group	src/tree.h	/^    int *group;$/;"	m	struct:__anon32
group_offset	src/tree.h	/^    int *group_offset;$/;"	m	struct:__anon32
group_size	src/tree.h	/^    int *group_size;$/;"	m	struct:__anon32
groups	src/layer.h	/^    int groups;$/;"	m	struct:layer
groups	src/tree.h	/^    int groups;$/;"	m	struct:__anon32
gun_classifier	src/classifier.cpp	/^void gun_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
h	src/box.h	/^    float x, y, w, h;$/;"	m	struct:box
h	src/data.h	/^    float x, y, w, h;$/;"	m	struct:__anon25
h	src/data.h	/^    int h;$/;"	m	struct:load_args
h	src/data.h	/^    int w, h;$/;"	m	struct:__anon23
h	src/image.h	/^    int h;$/;"	m	struct:image
h	src/layer.h	/^    int h, w, c;$/;"	m	struct:layer
h	src/network.h	/^    int h, w, c;$/;"	m	struct:network
h	src/parser.cpp	/^    int h;$/;"	m	struct:size_params	file:
h	src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon10::__anon11
h	src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon20
h2	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon10::__anon11
h_cpu	src/layer.h	/^    float *h_cpu;$/;"	m	struct:layer
h_gpu	src/layer.h	/^    float *h_gpu;$/;"	m	struct:layer
ha	src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon10::__anon11
hardtan_activate	src/activations.h	/^static inline float hardtan_activate(float x)$/;"	f
hardtan_gradient	src/activations.h	/^static inline float hardtan_gradient(float x)$/;"	f
hd	src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon10::__anon11
hidden	src/layer.h	/^    int hidden;$/;"	m	struct:layer
hier_thresh	yolo++/yolo.h	/^    float hier_thresh;$/;"	m	class:Yolo
hierarchy	src/data.h	/^    tree *hierarchy;$/;"	m	struct:load_args
hierarchy	src/network.h	/^    tree *hierarchy;$/;"	m	struct:network
hierarchy_predictions	src/tree.cpp	/^void hierarchy_predictions(float *predictions, int n, tree *hier, int only_leaves)$/;"	f
hierarchy_top_prediction	src/tree.cpp	/^int hierarchy_top_prediction(float *predictions, tree *hier, float thresh)$/;"	f
hold_out_matrix	src/matrix.cpp	/^matrix hold_out_matrix(matrix *m, int n)$/;"	f
hs	src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon12
hsv_to_rgb	src/image.cpp	/^void hsv_to_rgb(image im)$/;"	f
hue	src/data.h	/^    float hue;$/;"	m	struct:load_args
hue	src/network.h	/^    float hue;$/;"	m	struct:network
hue_image	src/image.cpp	/^void hue_image(image im, float hue)$/;"	f
huff_ac	src/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon10
huff_dc	src/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon10
id	app/darknet/camera.h	/^    int id;$/;"	m	class:Camera
id	app/darknet/config.h	/^    int id;$/;"	m	struct:CameraInfo
id	src/blob.h	/^    size_t id;$/;"	m	struct:Blob
id	src/camera.h	/^    int id;$/;"	m	class:Camera
id	src/config.h	/^    int id;$/;"	m	struct:CameraInfo
id	src/data.h	/^    int id;$/;"	m	struct:__anon25
id	src/stb_image.h	/^      int id;$/;"	m	struct:__anon10::__anon11
id	src/track.h	/^    int id;$/;"	m	class:Track
idata	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon16
idct_block_kernel	src/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon10
im	src/data.h	/^    image *im;$/;"	m	struct:load_args
im2col_cpu	src/im2col.cpp	/^void im2col_cpu(float* data_im,$/;"	f
im2col_get_pixel	src/im2col.cpp	/^float im2col_get_pixel(float *im, int height, int width, int channels,$/;"	f
image	src/image.h	/^struct image{$/;"	s
imageWinTitle	src/display.h	/^    std::string imageWinTitle;$/;"	m	class:Display
image_distance	src/image.cpp	/^image image_distance(image a, image b)$/;"	f
image_height	src/blob.h	/^    int image_height;$/;"	m	struct:Blob
image_width	src/blob.h	/^    int image_width;$/;"	m	struct:Blob
images	app/darknet/demo.cpp	/^static image images[FRAMES];$/;"	v	file:
img_buffer	src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon7
img_buffer_end	src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon7
img_buffer_original	src/stb_image.h	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon7
img_comp	src/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon10	typeref:struct:__anon10::__anon11
img_h_max	src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon10
img_mcu_h	src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon10
img_mcu_w	src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon10
img_mcu_x	src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon10
img_mcu_y	src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon10
img_n	src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon7
img_out_n	src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon7
img_v_max	src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon10
img_x	src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon7
img_y	src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon7
in	app/darknet/demo.cpp	/^static image in   ;$/;"	v	file:
inSpawnRegion	src/objecttracker.cpp	/^bool inSpawnRegion(const cv::Point& center, const Spawns& spawns) {$/;"	f
in_s	app/darknet/demo.cpp	/^static image in_s ;$/;"	v	file:
increment_layer	src/crnn_layer.cpp	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	src/gru_layer.cpp	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	src/rnn_layer.cpp	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
index	src/box.cpp	/^    int index;$/;"	m	struct:__anon30	file:
index	src/display.h	/^        int index;$/;"	m	class:Display::FPS
index	src/layer.h	/^    int index;$/;"	m	struct:layer
index	src/network.h	/^    int index;$/;"	m	struct:network_state
index	src/parser.cpp	/^    int index;$/;"	m	struct:size_params	file:
indexes	src/layer.h	/^    int *indexes;$/;"	m	struct:layer
indexes_gpu	src/layer.h	/^    int *indexes_gpu;$/;"	m	struct:layer
info_arch	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
input	src/network.h	/^    float *input;$/;"	m	struct:network_state
input_gate_layer	src/layer.h	/^    struct layer *input_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_gpu	src/network.h	/^    float **input_gpu;$/;"	m	struct:network
input_h_layer	src/layer.h	/^    struct layer *input_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layer	src/layer.h	/^    struct layer *input_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layers	src/layer.h	/^    int *input_layers;$/;"	m	struct:layer
input_r_layer	src/layer.h	/^    struct layer *input_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_save_layer	src/layer.h	/^    struct layer *input_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_sizes	src/layer.h	/^    int *input_sizes;$/;"	m	struct:layer
input_state_layer	src/layer.h	/^    struct layer *input_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_z_layer	src/layer.h	/^    struct layer *input_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
inputs	src/layer.h	/^    int inputs;$/;"	m	struct:layer
inputs	src/network.h	/^    int inputs;$/;"	m	struct:network
inputs	src/parser.cpp	/^    int inputs;$/;"	m	struct:size_params	file:
instance	app/darknet/config.cpp	/^Config* Config::instance = nullptr; $/;"	m	class:Config	file:
instance	app/darknet/config.h	/^    static Config* instance;$/;"	m	class:Config
instance	src/config.cpp	/^Config* Config::instance = nullptr; $/;"	m	class:Config	file:
instance	src/config.h	/^    static Config* instance;$/;"	m	class:Config
instances	src/track.cpp	/^size_t Track::instances = 0;$/;"	m	class:Track	file:
instances	src/track.h	/^    static size_t instances;$/;"	m	class:Track
int_to_alphanum	src/utils.cpp	/^char int_to_alphanum(int i)$/;"	f
inverted	app/darknet/go.cpp	/^int inverted = 1;$/;"	v
invisibleAge	src/track.h	/^    int invisibleAge;$/;"	m	class:Track
invisibleMax	src/objecttracker.cpp	/^const int invisibleMax = 5;$/;"	v
io	src/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon7
io_user_data	src/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon7
ip	app/darknet/config.h	/^    std::string ip;$/;"	m	struct:CameraInfo
ip	src/config.h	/^    std::string ip;$/;"	m	struct:CameraInfo
ipl_to_image	src/image.cpp	/^image ipl_to_image(IplImage* src)$/;"	f
isCameraDefined	app/darknet/config.cpp	/^bool Config::isCameraDefined(int id) {$/;"	f	class:Config
isCameraDefined	src/config.cpp	/^bool Config::isCameraDefined(int id) {$/;"	f	class:Config
isTrackLost	src/objecttracker.cpp	/^bool isTrackLost(std::unique_ptr<Track>& track) {$/;"	f
isVisible	src/track.cpp	/^bool Track::isVisible() {$/;"	f	class:Track
is_network	src/parser.cpp	/^int is_network(section *s)$/;"	f
jitter	src/data.h	/^    float jitter;$/;"	m	struct:load_args
jitter	src/layer.h	/^    float jitter;$/;"	m	struct:layer
joint	src/layer.h	/^    int joint;$/;"	m	struct:layer
kappa	src/layer.h	/^    float kappa;$/;"	m	struct:layer
kdTreeLeafMax	src/objecttracker.cpp	/^const int kdTreeLeafMax = 2;$/;"	v
key	src/option_list.h	/^    char *key;$/;"	m	struct:__anon31
kvp	src/option_list.h	/^} kvp;$/;"	t	typeref:struct:__anon31
l2_cpu	src/blas.cpp	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
labelFont	src/display.cpp	/^const cv::HersheyFonts labelFont = cv::HersheyFonts::FONT_HERSHEY_SIMPLEX;$/;"	v
labelFontThickness	src/display.cpp	/^const int labelFontThickness = 1;$/;"	v
labelPad	src/display.cpp	/^const int labelPad = 3;$/;"	v
labelScale	src/display.cpp	/^const double labelScale = 0.4;$/;"	v
label_classifier	src/classifier.cpp	/^void label_classifier(char *datacfg, char *filename, char *weightfile)$/;"	f
labels	src/data.h	/^    char **labels;$/;"	m	struct:load_args
layer	src/layer.h	/^    layer() :$/;"	f	struct:layer
layer	src/layer.h	/^struct layer {$/;"	s
layer	src/layer.h	/^typedef struct layer layer;$/;"	t	typeref:struct:layer
layers	src/network.h	/^    layer *layers;$/;"	m	struct:network
leaf	src/tree.h	/^    int *leaf;$/;"	m	struct:__anon32
leaky_activate	src/activations.h	/^static inline float leaky_activate(float x){return (x>0) ? x : .1*x;}$/;"	f
leaky_gradient	src/activations.h	/^static inline float leaky_gradient(float x){return (x>0) ? 1 : .1;}$/;"	f
learning_rate	src/network.h	/^    float learning_rate;$/;"	m	struct:network
learning_rate_policy	src/network.h	/^} learning_rate_policy;$/;"	t	typeref:enum:__anon28
left	src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon25
legal_go	app/darknet/go.cpp	/^int legal_go(float *b, char *ko, int p, int r, int c)$/;"	f
length	src/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon15
lflags	src/stb_image.h	/^   int lflags;$/;"	m	struct:__anon20
lhtan_activate	src/activations.h	/^static inline float lhtan_activate(float x)$/;"	f
lhtan_gradient	src/activations.h	/^static inline float lhtan_gradient(float x)$/;"	f
line0	src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon12
line1	src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon12
line_size	src/stb_image.h	/^   int line_size;$/;"	m	struct:__anon20
linear_activate	src/activations.h	/^static inline float linear_activate(float x){return x;}$/;"	f
linear_gradient	src/activations.h	/^static inline float linear_gradient(float x){return 1;}$/;"	f
linebuf	src/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon10::__anon11
list	src/list.h	/^typedef struct list {$/;"	s
list	src/list.h	/^} list;$/;"	t	typeref:struct:list
list_insert	src/list.cpp	/^void list_insert(list *l, void *val)$/;"	f
list_pop	src/list.cpp	/^void *list_pop(list *l){$/;"	f
list_to_array	src/list.cpp	/^void **list_to_array(list *l)$/;"	f
load_all_cifar10	src/data.cpp	/^data load_all_cifar10()$/;"	f
load_alphabet	src/image.cpp	/^image **load_alphabet()$/;"	f
load_alphabet_custom	src/image.cpp	/^image **load_alphabet_custom(const char* path)$/;"	f
load_args	src/data.h	/^typedef struct load_args {$/;"	s
load_args	src/data.h	/^} load_args;$/;"	t	typeref:struct:load_args
load_batchnorm_weights	src/parser.cpp	/^void load_batchnorm_weights(layer l, FILE *fp)$/;"	f
load_categorical_data_csv	src/data.cpp	/^data load_categorical_data_csv(char *filename, int target, int k)$/;"	f
load_cifar10_data	src/data.cpp	/^data load_cifar10_data(char *filename)$/;"	f
load_connected_weights	src/parser.cpp	/^void load_connected_weights(layer l, FILE *fp, int transpose)$/;"	f
load_convolutional_weights	src/parser.cpp	/^void load_convolutional_weights(layer l, FILE *fp)$/;"	f
load_convolutional_weights_binary	src/parser.cpp	/^void load_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
load_data	src/data.cpp	/^pthread_t load_data(load_args args)$/;"	f
load_data_augment	src/data.cpp	/^data load_data_augment(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_captcha	src/data.cpp	/^data load_data_captcha(char **paths, int n, int m, int k, int w, int h)$/;"	f
load_data_captcha_encode	src/data.cpp	/^data load_data_captcha_encode(char **paths, int n, int m, int w, int h)$/;"	f
load_data_compare	src/data.cpp	/^data load_data_compare(int n, char **paths, int m, int classes, int w, int h)$/;"	f
load_data_detection	src/data.cpp	/^data load_data_detection(int n, char **paths, int m, int w, int h, int boxes, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_in_thread	src/data.cpp	/^pthread_t load_data_in_thread(load_args args)$/;"	f
load_data_old	src/data.cpp	/^data load_data_old(char **paths, int n, int m, char **labels, int k, int w, int h)$/;"	f
load_data_region	src/data.cpp	/^data load_data_region(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_super	src/data.cpp	/^data load_data_super(char **paths, int n, int m, int w, int h, int scale)$/;"	f
load_data_swag	src/data.cpp	/^data load_data_swag(char **paths, int n, int classes, float jitter)$/;"	f
load_data_tag	src/data.cpp	/^data load_data_tag(char **paths, int n, int m, int k, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_writing	src/data.cpp	/^data load_data_writing(char **paths, int n, int m, int w, int h, int out_w, int out_h)$/;"	f
load_go	src/data.cpp	/^data load_go(char *filename)$/;"	f
load_go_moves	app/darknet/go.cpp	/^moves load_go_moves(char *filename)$/;"	f
load_image	src/image.cpp	/^image load_image(char *filename, int w, int h, int c)$/;"	f
load_image_augment_paths	src/data.cpp	/^matrix load_image_augment_paths(char **paths, int n, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_image_color	src/image.cpp	/^image load_image_color(char *filename, int w, int h)$/;"	f
load_image_cv	src/image.cpp	/^image load_image_cv(char *filename, int channels)$/;"	f
load_image_paths	src/data.cpp	/^matrix load_image_paths(char **paths, int n, int w, int h)$/;"	f
load_image_paths_gray	src/data.cpp	/^matrix load_image_paths_gray(char **paths, int n, int w, int h)$/;"	f
load_image_stb	src/image.cpp	/^image load_image_stb(char *filename, int channels)$/;"	f
load_jpeg_image	src/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
load_labels_paths	src/data.cpp	/^matrix load_labels_paths(char **paths, int n, char **labels, int k, tree *hierarchy)$/;"	f
load_tags_paths	src/data.cpp	/^matrix load_tags_paths(char **paths, int n, int k)$/;"	f
load_thread	src/data.cpp	/^void *load_thread(void *ptr)$/;"	f
load_threads	src/data.cpp	/^void *load_threads(void *ptr)$/;"	f
load_weights	src/parser.cpp	/^void load_weights(network *net, char *filename)$/;"	f
load_weights_upto	src/parser.cpp	/^void load_weights_upto(network *net, char *filename, int cutoff)$/;"	f
local_layer	src/local_layer.h	/^typedef layer local_layer;$/;"	t
local_out_height	src/local_layer.cpp	/^int local_out_height(local_layer l)$/;"	f
local_out_width	src/local_layer.cpp	/^int local_out_width(local_layer l)$/;"	f
log	src/layer.h	/^    int log;$/;"	m	struct:layer
loggy_activate	src/activations.h	/^static inline float loggy_activate(float x){return 2.\/(1. + exp(-x)) - 1;}$/;"	f
loggy_gradient	src/activations.h	/^static inline float loggy_gradient(float x)$/;"	f
logistic_activate	src/activations.h	/^static inline float logistic_activate(float x){return 1.\/(1. + exp(-x));}$/;"	f
logistic_gradient	src/activations.h	/^static inline float logistic_gradient(float x){return (1-x)*x;}$/;"	f
logit	src/region_layer.cpp	/^float logit(float x)$/;"	f
lpal	src/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon20
m	src/data.h	/^    int m;$/;"	m	struct:load_args
m	src/layer.h	/^    float *m;$/;"	m	struct:layer
m_gpu	src/layer.h	/^    float *m_gpu;$/;"	m	struct:layer
mag_array	src/utils.cpp	/^float mag_array(float *a, int n)$/;"	f
main	app/darknet++/darknet++.cpp	/^int main(int argc, char** argv)$/;"	f
main	app/darknet/darknet.cpp	/^int main(int argc, char **argv)$/;"	f
main	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
make_activation_layer	src/activation_layer.cpp	/^layer make_activation_layer(int batch, int inputs, ACTIVATION activation)$/;"	f
make_avgpool_layer	src/avgpool_layer.cpp	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c)$/;"	f
make_batchnorm_layer	src/batchnorm_layer.cpp	/^layer make_batchnorm_layer(int batch, int w, int h, int c)$/;"	f
make_connected_layer	src/connected_layer.cpp	/^connected_layer make_connected_layer(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize)$/;"	f
make_convolutional_layer	src/convolutional_layer.cpp	/^convolutional_layer make_convolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam)$/;"	f
make_cost_layer	src/cost_layer.cpp	/^cost_layer make_cost_layer(int batch, int inputs, COST_TYPE cost_type, float scale)$/;"	f
make_crnn_layer	src/crnn_layer.cpp	/^layer make_crnn_layer(int batch, int h, int w, int c, int hidden_filters, int output_filters, int steps, ACTIVATION activation, int batch_normalize)$/;"	f
make_crop_layer	src/crop_layer.cpp	/^crop_layer make_crop_layer(int batch, int h, int w, int c, int crop_height, int crop_width, int flip, float angle, float saturation, float exposure)$/;"	f
make_deconvolutional_layer	src/deconvolutional_layer.cpp	/^deconvolutional_layer make_deconvolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, ACTIVATION activation)$/;"	f
make_detection_layer	src/detection_layer.cpp	/^detection_layer make_detection_layer(int batch, int inputs, int n, int side, int classes, int coords, int rescore)$/;"	f
make_dropout_layer	src/dropout_layer.cpp	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability)$/;"	f
make_empty_image	src/image.cpp	/^image make_empty_image(int w, int h, int c)$/;"	f
make_gru_layer	src/gru_layer.cpp	/^layer make_gru_layer(int batch, int inputs, int outputs, int steps, int batch_normalize)$/;"	f
make_image	src/image.cpp	/^image make_image(int w, int h, int c)$/;"	f
make_labels	data/labels/make_labels.py	/^def make_labels(s):$/;"	f
make_list	src/list.cpp	/^list *make_list()$/;"	f
make_local_layer	src/local_layer.cpp	/^local_layer make_local_layer(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation)$/;"	f
make_matrix	src/matrix.cpp	/^matrix make_matrix(int rows, int cols)$/;"	f
make_maxpool_layer	src/maxpool_layer.cpp	/^maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f
make_network	src/network.cpp	/^network make_network(int n)$/;"	f
make_normalization_layer	src/normalization_layer.cpp	/^layer make_normalization_layer(int batch, int w, int h, int c, int size, float alpha, float beta, float kappa)$/;"	f
make_random_image	src/image.cpp	/^image make_random_image(int w, int h, int c)$/;"	f
make_region_layer	src/region_layer.cpp	/^layer make_region_layer(int batch, int w, int h, int n, int classes, int coords)$/;"	f
make_reorg_layer	src/reorg_layer.cpp	/^layer make_reorg_layer(int batch, int w, int h, int c, int stride, int reverse)$/;"	f
make_rnn_layer	src/rnn_layer.cpp	/^layer make_rnn_layer(int batch, int inputs, int hidden, int outputs, int steps, ACTIVATION activation, int batch_normalize, int log)$/;"	f
make_route_layer	src/route_layer.cpp	/^route_layer make_route_layer(int batch, int n, int *input_layers, int *input_sizes)$/;"	f
make_shortcut_layer	src/shortcut_layer.cpp	/^layer make_shortcut_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2)$/;"	f
make_softmax_layer	src/softmax_layer.cpp	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f
makes_safe_go	app/darknet/go.cpp	/^int makes_safe_go(float *b, int *lib, int p, int r, int c){$/;"	f
malloc_error	src/utils.cpp	/^void malloc_error()$/;"	f
map	src/layer.h	/^    int *map;$/;"	m	struct:layer
marker	src/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon10
maskImage	src/difference.h	/^    cv::Mat maskImage;$/;"	m	class:DifferenceTracker
matrix	src/matrix.h	/^typedef struct matrix {$/;"	s
matrix	src/matrix.h	/^} matrix;$/;"	t	typeref:struct:matrix
matrix_add_matrix	src/matrix.cpp	/^void matrix_add_matrix(matrix from, matrix to)$/;"	f
matrix_to_csv	src/matrix.cpp	/^void matrix_to_csv(matrix m)$/;"	f
matrix_topk_accuracy	src/matrix.cpp	/^float matrix_topk_accuracy(matrix truth, matrix guess, int k)$/;"	f
max	src/data.h	/^    int min, max, size;$/;"	m	struct:load_args
maxCombinedArea	src/objecttracker.cpp	/^const double maxCombinedArea = 15000.0;$/;"	v
max_batches	src/network.h	/^    int max_batches;$/;"	m	struct:network
max_boxes	src/layer.h	/^    int max_boxes;$/;"	m	struct:layer
max_crop	src/network.h	/^    int max_crop;$/;"	m	struct:network
max_index	src/utils.cpp	/^int max_index(float *a, int n)$/;"	f
max_x	src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon20
max_y	src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon20
maxcode	src/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon13
maxcode	src/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon9
maxpool_layer	src/maxpool_layer.h	/^typedef layer maxpool_layer;$/;"	t
mean	src/layer.h	/^    float *mean;$/;"	m	struct:layer
mean_array	src/utils.cpp	/^float mean_array(float *a, int n)$/;"	f
mean_arrays	src/utils.cpp	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f
mean_cpu	src/blas.cpp	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_delta	src/layer.h	/^    float *mean_delta;$/;"	m	struct:layer
mean_delta_cpu	src/batchnorm_layer.cpp	/^void mean_delta_cpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
mean_delta_gpu	src/layer.h	/^    float * mean_delta_gpu;$/;"	m	struct:layer
mean_gpu	src/layer.h	/^    float * mean_gpu;$/;"	m	struct:layer
min	src/data.h	/^    int min, max, size;$/;"	m	struct:load_args
minCombinedArea	src/objecttracker.cpp	/^const double minCombinedArea = 2000.0;$/;"	v
min_crop	src/network.h	/^    int min_crop;$/;"	m	struct:network
momentum	src/network.h	/^    float momentum;$/;"	m	struct:network
mouseCallback	src/display.cpp	/^void mouseCallback(int event, int x, int y, int flags, void* data) {$/;"	f
mousePos	src/display.h	/^    cv::Point mousePos;$/;"	m	class:Display
move_go	app/darknet/go.cpp	/^void move_go(float *b, int p, int r, int c)$/;"	f
moves	app/darknet/go.cpp	/^} moves;$/;"	t	typeref:struct:__anon4	file:
mse_array	src/utils.cpp	/^float mse_array(float *a, int n)$/;"	f
mul_cpu	src/blas.cpp	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mutex	src/data.cpp	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
n	app/darknet/go.cpp	/^    int n;$/;"	m	struct:__anon4	file:
n	src/data.h	/^    int n;$/;"	m	struct:load_args
n	src/layer.h	/^    int n;$/;"	m	struct:layer
n	src/network.h	/^    int n;$/;"	m	struct:network
n	src/tree.h	/^    int n;$/;"	m	struct:__anon32
name	app/darknet/config.h	/^    std::string name;$/;"	m	struct:CameraClass
name	app/darknet/config.h	/^    std::string name;$/;"	m	struct:CameraInfo
name	src/config.h	/^    std::string name;$/;"	m	struct:CameraClass
name	src/config.h	/^    std::string name;$/;"	m	struct:CameraInfo
name	src/tree.h	/^    char **name;$/;"	m	struct:__anon32
name_list	yolo++/yolo.h	/^    const char* name_list;$/;"	m	class:Yolo
names	yolo++/yolo.h	/^    char **names;$/;"	m	class:Yolo
net	app/darknet/compare.cpp	/^    network net;$/;"	m	struct:__anon2	file:
net	app/darknet/demo.cpp	/^static network net;$/;"	v	file:
net	src/network.h	/^    network net;$/;"	m	struct:network_state
net	src/parser.cpp	/^    network net;$/;"	m	struct:size_params	file:
net	yolo++/yolo.h	/^    network net;$/;"	m	class:Yolo
network	src/network.h	/^typedef struct network {$/;"	s
network	src/network.h	/^} network;$/;"	t	typeref:struct:network
network_accuracies	src/network.cpp	/^float *network_accuracies(network net, data d, int n)$/;"	f
network_accuracy	src/network.cpp	/^float network_accuracy(network net, data d)$/;"	f
network_accuracy_multi	src/network.cpp	/^float network_accuracy_multi(network net, data d, int n)$/;"	f
network_predict	src/network.cpp	/^float *network_predict(network net, float *input)$/;"	f
network_predict_data	src/network.cpp	/^matrix network_predict_data(network net, data test)$/;"	f
network_predict_data_multi	src/network.cpp	/^matrix network_predict_data_multi(network net, data test, int n)$/;"	f
network_state	src/network.h	/^typedef struct network_state {$/;"	s
network_state	src/network.h	/^} network_state;$/;"	t	typeref:struct:network_state
newStr	src/blobSender.h	12;"	d
next	src/list.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node
nh	src/data.h	/^    int nh;$/;"	m	struct:load_args
nind	app/darknet/go.cpp	/^static const int nind = 5;$/;"	v	file:
nms	yolo++/yolo.h	/^    float nms;$/;"	m	class:Yolo
nms_comparator	src/box.cpp	/^int nms_comparator(const void *pa, const void *pb)$/;"	f
nnMaxResults	src/objecttracker.cpp	/^const int nnMaxResults = 4;$/;"	v
nnSearchRadius	src/objecttracker.cpp	/^const double nnSearchRadius = 8; \/\/ Pixels around contour edges$/;"	v
noadjust	src/layer.h	/^    int noadjust;$/;"	m	struct:layer
node	src/list.h	/^typedef struct node {$/;"	s
node	src/list.h	/^} node;$/;"	t	typeref:struct:node
noi	app/darknet/go.cpp	/^int noi = 1;$/;"	v
nomore	src/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon10
noobject_scale	src/layer.h	/^    float noobject_scale;$/;"	m	struct:layer
normalize_array	src/utils.cpp	/^void normalize_array(float *a, int n)$/;"	f
normalize_cpu	src/blas.cpp	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_data_rows	src/data.cpp	/^void normalize_data_rows(data d)$/;"	f
normalize_delta_cpu	src/batchnorm_layer.cpp	/^void normalize_delta_cpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_image	src/image.cpp	/^void normalize_image(image p)$/;"	f
normalize_image2	src/image.cpp	/^void normalize_image2(image p)$/;"	f
normalize_layer	app/darknet/darknet.cpp	/^layer normalize_layer(layer l, int n)$/;"	f
normalize_net	app/darknet/darknet.cpp	/^void normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
norms	src/layer.h	/^    float *norms;$/;"	m	struct:layer
norms_gpu	src/layer.h	/^    float * norms_gpu;$/;"	m	struct:layer
num_bits	src/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon14
num_boxes	src/data.h	/^    int *num_boxes;$/;"	m	struct:__anon23
num_boxes	src/data.h	/^    int num_boxes;$/;"	m	struct:load_args
num_steps	src/network.h	/^    int num_steps;$/;"	m	struct:network
nw	src/data.h	/^    int nw;$/;"	m	struct:load_args
object_class	yolo++/object.h	/^    int object_class;$/;"	m	struct:DetectedObject
object_scale	src/layer.h	/^    float object_scale;$/;"	m	struct:layer
objectness	src/layer.h	/^    int objectness;$/;"	m	struct:layer
ocv_to_yoloimg	yolo++/yolo.cpp	/^void Yolo::ocv_to_yoloimg(const cv::Mat& img, image& yolo_img)const$/;"	f	class:Yolo
one_hot_encode	src/utils.cpp	/^float **one_hot_encode(float *a, int n, int k)$/;"	f
oneoff	app/darknet/darknet.cpp	/^void oneoff(char *cfgfile, char *weightfile, char *outfile)$/;"	f
operations	app/darknet/darknet.cpp	/^void operations(char *cfgfile)$/;"	f
optimize_picture	src/nightmare.cpp	/^void optimize_picture(network *net, image orig, int max_layer, float scale, float rate, float thresh, int norm)$/;"	f
option_find	src/option_list.cpp	/^char *option_find(list *l, char *key)$/;"	f
option_find_float	src/option_list.cpp	/^float option_find_float(list *l, char *key, float def)$/;"	f
option_find_float_quiet	src/option_list.cpp	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f
option_find_int	src/option_list.cpp	/^int option_find_int(list *l, char *key, int def)$/;"	f
option_find_int_quiet	src/option_list.cpp	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f
option_find_str	src/option_list.cpp	/^char *option_find_str(list *l, char *key, char *def)$/;"	f
option_insert	src/option_list.cpp	/^void option_insert(list *l, char *key, char *val)$/;"	f
option_unused	src/option_list.cpp	/^void option_unused(list *l)$/;"	f
options	src/parser.cpp	/^    list *options;$/;"	m	struct:__anon27	file:
order	src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon10
orientation_theta	src/blob.h	/^    int orientation_theta = 0;$/;"	m	struct:Blob
orientation_x	src/blob.h	/^    int orientation_x = 0;$/;"	m	struct:Blob
orientation_y	src/blob.h	/^    int orientation_y = 0;$/;"	m	struct:Blob
orientation_z	src/blob.h	/^    int orientation_z = 0;$/;"	m	struct:Blob
origin_x	src/blob.h	/^    double origin_x = 0.0;$/;"	m	struct:Blob
origin_y	src/blob.h	/^    double origin_y = 0.0;$/;"	m	struct:Blob
origin_z	src/blob.h	/^    double origin_z = 0.0;$/;"	m	struct:Blob
out	src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon16
out	src/stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon20
out_c	src/layer.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_h	src/data.h	/^    int out_h;$/;"	m	struct:load_args
out_h	src/layer.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_w	src/data.h	/^    int out_w;$/;"	m	struct:load_args
out_w	src/layer.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
outfile	src/stb_image_write.h	/^static int outfile(char const *filename, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
output	src/layer.h	/^    float *output;$/;"	m	struct:layer
output	src/network.h	/^    float *output;$/;"	m	struct:network
output_gpu	src/layer.h	/^    float * output_gpu;$/;"	m	struct:layer
output_layer	src/layer.h	/^    struct layer *output_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
outputs	src/layer.h	/^    int outputs;$/;"	m	struct:layer
outputs	src/network.h	/^    int outputs;$/;"	m	struct:network
overlap	src/box.cpp	/^float overlap(float x1, float w1, float x2, float w2)$/;"	f
pad	src/layer.h	/^    int pad;$/;"	m	struct:layer
pal	src/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon20
parent	src/tree.h	/^    int *parent;$/;"	m	struct:__anon32
parse	src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon20
parseURL	app/darknet++/darknet++.cpp	/^std::string parseURL(int camId, std::string arg) {$/;"	f
parse_activation	src/parser.cpp	/^layer parse_activation(list *options, size_params params)$/;"	f
parse_avgpool	src/parser.cpp	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f
parse_batchnorm	src/parser.cpp	/^layer parse_batchnorm(list *options, size_params params)$/;"	f
parse_connected	src/parser.cpp	/^connected_layer parse_connected(list *options, size_params params)$/;"	f
parse_convolutional	src/parser.cpp	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f
parse_cost	src/parser.cpp	/^cost_layer parse_cost(list *options, size_params params)$/;"	f
parse_crnn	src/parser.cpp	/^layer parse_crnn(list *options, size_params params)$/;"	f
parse_crop	src/parser.cpp	/^crop_layer parse_crop(list *options, size_params params)$/;"	f
parse_csv_line	src/utils.cpp	/^list *parse_csv_line(char *line)$/;"	f
parse_data	src/parser.cpp	/^void parse_data(char *data, float *a, int n)$/;"	f
parse_detection	src/parser.cpp	/^detection_layer parse_detection(list *options, size_params params)$/;"	f
parse_dropout	src/parser.cpp	/^dropout_layer parse_dropout(list *options, size_params params)$/;"	f
parse_fields	src/utils.cpp	/^float *parse_fields(char *line, int n)$/;"	f
parse_gru	src/parser.cpp	/^layer parse_gru(list *options, size_params params)$/;"	f
parse_local	src/parser.cpp	/^local_layer parse_local(list *options, size_params params)$/;"	f
parse_maxpool	src/parser.cpp	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f
parse_net_options	src/parser.cpp	/^void parse_net_options(list *options, network *net)$/;"	f
parse_network_cfg	src/parser.cpp	/^network parse_network_cfg(char *filename)$/;"	f
parse_normalization	src/parser.cpp	/^layer parse_normalization(list *options, size_params params)$/;"	f
parse_region	src/parser.cpp	/^layer parse_region(list *options, size_params params)$/;"	f
parse_reorg	src/parser.cpp	/^layer parse_reorg(list *options, size_params params)$/;"	f
parse_rnn	src/parser.cpp	/^layer parse_rnn(list *options, size_params params)$/;"	f
parse_route	src/parser.cpp	/^route_layer parse_route(list *options, size_params params, network net)$/;"	f
parse_shortcut	src/parser.cpp	/^layer parse_shortcut(list *options, size_params params, network net)$/;"	f
parse_softmax	src/parser.cpp	/^softmax_layer parse_softmax(list *options, size_params params)$/;"	f
partial	app/darknet/darknet.cpp	/^void partial(char *cfgfile, char *weightfile, char *outfile, int max)$/;"	f
password	app/darknet/config.h	/^    std::string password;$/;"	m	struct:CameraClass
password	src/config.h	/^    std::string password;$/;"	m	struct:CameraClass
path	app/darknet/config.h	/^    std::string path;$/;"	m	struct:CameraClass
path	src/config.h	/^    std::string path;$/;"	m	struct:CameraClass
path	src/data.h	/^    char *path;$/;"	m	struct:load_args
paths	src/data.h	/^    char **paths;$/;"	m	struct:load_args
plse_activate	src/activations.h	/^static inline float plse_activate(float x)$/;"	f
plse_gradient	src/activations.h	/^static inline float plse_gradient(float x){return (x < 0 || x > 1) ? .01 : .125;}$/;"	f
pm	src/utils.cpp	/^void pm(int M, int N, float *A)$/;"	f
policy	src/network.h	/^    learning_rate_policy policy;$/;"	m	struct:network
pop_column	src/matrix.cpp	/^float *pop_column(matrix *m, int c)$/;"	f
portNumber	src/sender.h	/^    int portNumber;$/;"	m	class:Sender
portno	src/sender.h	/^    int sockfd, portno ;$/;"	m	class:Sender
pow_cpu	src/blas.cpp	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
power	src/network.h	/^    float power;$/;"	m	struct:network
predict_classifier	src/classifier.cpp	/^void predict_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int top)$/;"	f
predict_move	app/darknet/go.cpp	/^void predict_move(network net, float *board, float *move, int multi)$/;"	f
prediction	src/track.h	/^    TrackingData prediction;$/;"	m	class:Track
predictionSize	src/display.cpp	/^const int predictionSize = 3;$/;"	v
predictions	app/darknet/demo.cpp	/^static float *predictions[FRAMES];$/;"	v	file:
prefix	src/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon19
prev	src/list.h	/^    struct node *prev;$/;"	m	struct:node	typeref:struct:node::node
prevTick	src/display.h	/^        std::int64_t prevTick;$/;"	m	class:Display::FPS
prev_state	src/layer.h	/^    float *prev_state;$/;"	m	struct:layer
prev_state_gpu	src/layer.h	/^    float * prev_state_gpu;$/;"	m	struct:layer
printUsage	app/darknet++/darknet++.cpp	/^void printUsage(std::string progName) {$/;"	f
print_board	app/darknet/go.cpp	/^void print_board(float *board, int swap, int *indexes)$/;"	f
print_cocos	app/darknet/detector.cpp	/^static void print_cocos(FILE *fp, char *image_path, box *boxes, float **probs, int num_boxes, int classes, int w, int h)$/;"	f	file:
print_cocos	src/coco.cpp	/^void print_cocos(FILE *fp, int image_id, box *boxes, float **probs, int num_boxes, int classes, int w, int h)$/;"	f
print_detector_detections	app/darknet/detector.cpp	/^void print_detector_detections(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f
print_image	src/image.cpp	/^void print_image(image m)$/;"	f
print_imagenet_detections	app/darknet/detector.cpp	/^void print_imagenet_detections(FILE *fp, int id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f
print_letters	src/data.cpp	/^void print_letters(float *pred, int n)$/;"	f
print_matrix	src/matrix.cpp	/^void print_matrix(matrix m)$/;"	f
print_network	src/network.cpp	/^void print_network(network net)$/;"	f
print_statistics	src/utils.cpp	/^void print_statistics(float *a, int n)$/;"	f
print_symbol	app/darknet/rnn.cpp	/^void print_symbol(int n, char **tokens){$/;"	f
print_yolo_detections	app/darknet/yolo.cpp	/^void print_yolo_detections(FILE **fps, char *id, box *boxes, float **probs, int total, int classes, int w, int h)$/;"	f
prob	yolo++/object.h	/^    float prob;$/;"	m	struct:DetectedObject
probability	src/layer.h	/^    float probability;$/;"	m	struct:layer
probs	app/darknet/demo.cpp	/^static float **probs;$/;"	v	file:
probs	src/box.cpp	/^    float **probs;$/;"	m	struct:__anon30	file:
processContours	src/objecttracker.cpp	/^void ObjectTracker::processContours(Tracks& tracks, std::vector<DetectedObject>& contours,const Spawns& spawns) {$/;"	f	class:ObjectTracker
processContoursDiff	src/objecttracker.cpp	/^void ObjectTracker::processContoursDiff(Tracks& tracks, std::vector<Contour>& contours, const Spawns& spawns) {$/;"	f	class:ObjectTracker
processFrame	src/difference.cpp	/^void DifferenceTracker::processFrame(cv::Mat& frame, const Spawns& spawns, std::vector<Contour>& contours) {$/;"	f	class:DifferenceTracker
progressive	src/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon10
propagate_liberty	app/darknet/go.cpp	/^void propagate_liberty(float *board, int *lib, int *visited, int row, int col, int side)$/;"	f
pull_batchnorm_layer	src/batchnorm_layer.cpp	/^void pull_batchnorm_layer(layer l)$/;"	f
pull_connected_layer	src/connected_layer.cpp	/^void pull_connected_layer(connected_layer l)$/;"	f
pull_cost_layer	src/cost_layer.cpp	/^void pull_cost_layer(cost_layer l)$/;"	f
pull_crnn_layer	src/crnn_layer.cpp	/^void pull_crnn_layer(layer l)$/;"	f
pull_gru_layer	src/gru_layer.cpp	/^void pull_gru_layer(layer l)$/;"	f
pull_local_layer	src/local_layer.cpp	/^void pull_local_layer(local_layer l)$/;"	f
pull_rnn_layer	src/rnn_layer.cpp	/^void pull_rnn_layer(layer l)$/;"	f
pull_softmax_layer_output	src/softmax_layer.cpp	/^void pull_softmax_layer_output(const softmax_layer layer)$/;"	f
push_batchnorm_layer	src/batchnorm_layer.cpp	/^void push_batchnorm_layer(layer l)$/;"	f
push_connected_layer	src/connected_layer.cpp	/^void push_connected_layer(connected_layer l)$/;"	f
push_cost_layer	src/cost_layer.cpp	/^void push_cost_layer(cost_layer l)$/;"	f
push_crnn_layer	src/crnn_layer.cpp	/^void push_crnn_layer(layer l)$/;"	f
push_gru_layer	src/gru_layer.cpp	/^void push_gru_layer(layer l)$/;"	f
push_local_layer	src/local_layer.cpp	/^void push_local_layer(local_layer l)$/;"	f
push_rnn_layer	src/rnn_layer.cpp	/^void push_rnn_layer(layer l)$/;"	f
qnxnto	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
r_cpu	src/layer.h	/^    float *r_cpu;$/;"	m	struct:layer
r_gpu	src/layer.h	/^    float *r_gpu;$/;"	m	struct:layer
ramp_activate	src/activations.h	/^static inline float ramp_activate(float x){return x*(x>0)+.1*x;}$/;"	f
ramp_gradient	src/activations.h	/^static inline float ramp_gradient(float x){return (x>0)+.1;}$/;"	f
rand	src/layer.h	/^    float *rand;$/;"	m	struct:layer
rand_gpu	src/layer.h	/^    float * rand_gpu;$/;"	m	struct:layer
rand_int	src/utils.cpp	/^int rand_int(int min, int max)$/;"	f
rand_normal	src/utils.cpp	/^float rand_normal()$/;"	f
rand_scale	src/utils.cpp	/^float rand_scale(float s)$/;"	f
rand_size_t	src/utils.cpp	/^size_t rand_size_t()$/;"	f
rand_uniform	src/utils.cpp	/^float rand_uniform(float min, float max)$/;"	f
random	src/layer.h	/^    int random;$/;"	m	struct:layer
random_augment_image	src/image.cpp	/^image random_augment_image(image im, float angle, float aspect, int low, int high, int size)$/;"	f
random_crop_image	src/image.cpp	/^image random_crop_image(image im, int w, int h)$/;"	f
random_distort_image	src/image.cpp	/^void random_distort_image(image im, float hue, float saturation, float exposure)$/;"	f
random_go_moves	app/darknet/go.cpp	/^void random_go_moves(moves m, float *boards, float *labels, int n)$/;"	f
random_matrix	src/gemm.cpp	/^float *random_matrix(int rows, int cols)$/;"	f
randomize_boxes	src/data.cpp	/^void randomize_boxes(box_label *b, int n)$/;"	f
randomize_data	src/data.cpp	/^void randomize_data(data d)$/;"	f
ratio	src/layer.h	/^    float ratio;$/;"	m	struct:layer
ratio	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon20
raw_coeff	src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon10::__anon11
raw_data	src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon10::__anon11
read	src/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon6
read_all	src/utils.cpp	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f
read_all_fail	src/utils.cpp	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
read_boxes	src/data.cpp	/^box_label *read_boxes(char *filename, int *n)$/;"	f
read_cfg	src/parser.cpp	/^list *read_cfg(char *filename)$/;"	f
read_data_cfg	src/option_list.cpp	/^list *read_data_cfg(char *filename)$/;"	f
read_from_callbacks	src/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon7
read_int	src/utils.cpp	/^int read_int(int fd)$/;"	f
read_map	src/utils.cpp	/^int *read_map(char *filename)$/;"	f
read_option	src/option_list.cpp	/^int read_option(char *s, list *options)$/;"	f
read_tokenized_data	app/darknet/rnn.cpp	/^int *read_tokenized_data(char *filename, size_t *read)$/;"	f
read_tokens	app/darknet/rnn.cpp	/^char **read_tokens(char *filename, size_t *read)$/;"	f
read_tree	src/tree.cpp	/^tree *read_tree(char *filename)$/;"	f
reconstruct_picture	src/nightmare.cpp	/^void reconstruct_picture(network net, float *features, image recon, image update, float rate, float momentum, float lambda, int smooth_size, int iters)$/;"	f
relie_activate	src/activations.h	/^static inline float relie_activate(float x){return (x>0) ? x : .01*x;}$/;"	f
relie_gradient	src/activations.h	/^static inline float relie_gradient(float x){return (x>0) ? 1 : .01;}$/;"	f
relu_activate	src/activations.h	/^static inline float relu_activate(float x){return x*(x>0);}$/;"	f
relu_gradient	src/activations.h	/^static inline float relu_gradient(float x){return (x>0);}$/;"	f
removeStr	src/blobSender.h	14;"	d
remove_connected	app/darknet/go.cpp	/^void remove_connected(float *b, int *lib, int p, int r, int c)$/;"	f
reorg	src/layer.h	/^    int reorg;$/;"	m	struct:layer
reorg_cpu	src/blas.cpp	/^void reorg_cpu(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f
resample	src/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon12
resample_row_1	src/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	src/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	src/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon10
rescale_net	app/darknet/darknet.cpp	/^void rescale_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rescale_weights	src/convolutional_layer.cpp	/^void rescale_weights(convolutional_layer l, float scale, float trans)$/;"	f
rescore	src/layer.h	/^    int rescore;$/;"	m	struct:layer
reset_momentum	src/network.cpp	/^void reset_momentum(network net)$/;"	f
reset_normalize_net	app/darknet/darknet.cpp	/^void reset_normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
reset_rnn_state	app/darknet/rnn.cpp	/^void reset_rnn_state(network net, int b)$/;"	f
resize_avgpool_layer	src/avgpool_layer.cpp	/^void resize_avgpool_layer(avgpool_layer *l, int w, int h)$/;"	f
resize_batchnorm_layer	src/batchnorm_layer.cpp	/^void resize_batchnorm_layer(layer *layer, int w, int h)$/;"	f
resize_convolutional_layer	src/convolutional_layer.cpp	/^void resize_convolutional_layer(convolutional_layer *l, int w, int h)$/;"	f
resize_cost_layer	src/cost_layer.cpp	/^void resize_cost_layer(cost_layer *l, int inputs)$/;"	f
resize_crop_layer	src/crop_layer.cpp	/^void resize_crop_layer(layer *l, int w, int h)$/;"	f
resize_deconvolutional_layer	src/deconvolutional_layer.cpp	/^void resize_deconvolutional_layer(deconvolutional_layer *l, int h, int w)$/;"	f
resize_dropout_layer	src/dropout_layer.cpp	/^void resize_dropout_layer(dropout_layer *l, int inputs)$/;"	f
resize_image	src/image.cpp	/^image resize_image(image im, int w, int h)$/;"	f
resize_matrix	src/matrix.cpp	/^matrix resize_matrix(matrix m, int size)$/;"	f
resize_max	src/image.cpp	/^image resize_max(image im, int max)$/;"	f
resize_maxpool_layer	src/maxpool_layer.cpp	/^void resize_maxpool_layer(maxpool_layer *l, int w, int h)$/;"	f
resize_min	src/image.cpp	/^image resize_min(image im, int min)$/;"	f
resize_network	src/network.cpp	/^int resize_network(network *net, int w, int h)$/;"	f
resize_normalization_layer	src/normalization_layer.cpp	/^void resize_normalization_layer(layer *layer, int w, int h)$/;"	f
resize_region_layer	src/region_layer.cpp	/^void resize_region_layer(layer *l, int w, int h)$/;"	f
resize_reorg_layer	src/reorg_layer.cpp	/^void resize_reorg_layer(layer *l, int w, int h)$/;"	f
resize_route_layer	src/route_layer.cpp	/^void resize_route_layer(route_layer *l, network *net)$/;"	f
resized	src/data.h	/^    image *resized;$/;"	m	struct:load_args
restart_interval	src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon10
reverse	src/layer.h	/^    int reverse;$/;"	m	struct:layer
rgb_to_hsv	src/image.cpp	/^void rgb_to_hsv(image im)$/;"	f
rgbgr_image	src/image.cpp	/^void rgbgr_image(image im)$/;"	f
rgbgr_net	app/darknet/darknet.cpp	/^void rgbgr_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rgbgr_weights	src/convolutional_layer.cpp	/^void rgbgr_weights(convolutional_layer l)$/;"	f
right	src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon25
rolling_mean	src/layer.h	/^    float *rolling_mean;$/;"	m	struct:layer
rolling_mean_gpu	src/layer.h	/^    float * rolling_mean_gpu;$/;"	m	struct:layer
rolling_variance	src/layer.h	/^    float *rolling_variance;$/;"	m	struct:layer
rolling_variance_gpu	src/layer.h	/^    float * rolling_variance_gpu;$/;"	m	struct:layer
rotate_crop_image	src/image.cpp	/^image rotate_crop_image(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)$/;"	f
rotate_image	src/image.cpp	/^image rotate_image(image im, float rad)$/;"	f
rotate_image_cw	src/image.cpp	/^void rotate_image_cw(image im, int times)$/;"	f
route_layer	src/route_layer.h	/^typedef layer route_layer;$/;"	t
rows	src/matrix.h	/^    int rows, cols;$/;"	m	struct:matrix
run_art	app/darknet/art.cpp	/^void run_art(int argc, char **argv)$/;"	f
run_captcha	src/captcha.cpp	/^void run_captcha(int argc, char **argv)$/;"	f
run_char_rnn	app/darknet/rnn.cpp	/^void run_char_rnn(int argc, char **argv)$/;"	f
run_cifar	app/darknet/cifar.cpp	/^void run_cifar(int argc, char **argv)$/;"	f
run_classifier	src/classifier.cpp	/^void run_classifier(int argc, char **argv)$/;"	f
run_coco	src/coco.cpp	/^void run_coco(int argc, char **argv)$/;"	f
run_compare	app/darknet/compare.cpp	/^void run_compare(int argc, char **argv)$/;"	f
run_detector	app/darknet/detector.cpp	/^void run_detector(int argc, char **argv)$/;"	f
run_dice	app/darknet/dice.cpp	/^void run_dice(int argc, char **argv)$/;"	f
run_go	app/darknet/go.cpp	/^void run_go(int argc, char **argv)$/;"	f
run_nightmare	src/nightmare.cpp	/^void run_nightmare(int argc, char **argv)$/;"	f
run_super	app/darknet/super.cpp	/^void run_super(int argc, char **argv)$/;"	f
run_swag	app/darknet/swag.cpp	/^void run_swag(int argc, char **argv)$/;"	f
run_tag	app/darknet/tag.cpp	/^void run_tag(int argc, char **argv)$/;"	f
run_vid_rnn	app/darknet/rnn_vid.cpp	/^void run_vid_rnn(int argc, char **argv)$/;"	f
run_vid_rnn	app/darknet/rnn_vid.cpp	/^void run_vid_rnn(int argc, char **argv){}$/;"	f
run_voxel	app/darknet/voxel.cpp	/^void run_voxel(int argc, char **argv)$/;"	f
run_writing	app/darknet/writing.cpp	/^void run_writing(int argc, char **argv)$/;"	f
run_yolo	app/darknet/yolo.cpp	/^void run_yolo(int argc, char **argv)$/;"	f
s	src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon10
s	src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon16
sample_array	src/utils.cpp	/^int sample_array(float *a, int n)$/;"	f
saturate_exposure_image	src/image.cpp	/^void saturate_exposure_image(image im, float sat, float exposure)$/;"	f
saturate_image	src/image.cpp	/^void saturate_image(image im, float sat)$/;"	f
saturation	src/data.h	/^    float saturation;$/;"	m	struct:load_args
saturation	src/layer.h	/^    float saturation;$/;"	m	struct:layer
saturation	src/network.h	/^    float saturation;$/;"	m	struct:network
save_batchnorm_weights	src/parser.cpp	/^void save_batchnorm_weights(layer l, FILE *fp)$/;"	f
save_connected_weights	src/parser.cpp	/^void save_connected_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights	src/parser.cpp	/^void save_convolutional_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights_binary	src/parser.cpp	/^void save_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
save_delta_gpu	src/layer.h	/^    float * save_delta_gpu;$/;"	m	struct:layer
save_gpu	src/layer.h	/^    float * save_gpu;$/;"	m	struct:layer
save_image	src/image.cpp	/^void save_image(image im, const char *name)$/;"	f
save_image_jpg	src/image.cpp	/^void save_image_jpg(image p, const char *name)$/;"	f
save_image_png	src/image.cpp	/^void save_image_png(image im, const char *name)$/;"	f
save_reconstruction	app/darknet/rnn_vid.cpp	/^image save_reconstruction(network net, image *init, float *feat, char *name, int i)$/;"	f
save_weights	src/parser.cpp	/^void save_weights(network net, char *filename)$/;"	f
save_weights_upto	src/parser.cpp	/^void save_weights_upto(network net, char *filename, int cutoff)$/;"	f
scal_cpu	src/blas.cpp	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
scale	src/data.h	/^    int scale;$/;"	m	struct:load_args
scale	src/layer.h	/^    float scale;$/;"	m	struct:layer
scale	src/network.h	/^    float scale;$/;"	m	struct:network
scale_array	src/utils.cpp	/^void scale_array(float *a, int n, float s)$/;"	f
scale_bias	src/convolutional_layer.cpp	/^void scale_bias(float *output, float *scales, int batch, int n, int size)$/;"	f
scale_data_rows	src/data.cpp	/^void scale_data_rows(data d, float s)$/;"	f
scale_image	src/image.cpp	/^void scale_image(image m, float s)$/;"	f
scale_image_channel	src/image.cpp	/^void scale_image_channel(image im, int c, float v)$/;"	f
scale_matrix	src/matrix.cpp	/^void scale_matrix(matrix m, float scale)$/;"	f
scale_updates	src/layer.h	/^    float *scale_updates;$/;"	m	struct:layer
scale_updates_gpu	src/layer.h	/^    float * scale_updates_gpu;$/;"	m	struct:layer
scales	src/layer.h	/^    float *scales;$/;"	m	struct:layer
scales	src/network.h	/^    float *scales;$/;"	m	struct:network
scales_gpu	src/layer.h	/^    float * scales_gpu;$/;"	m	struct:layer
scan_n	src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon10
score_game	app/darknet/go.cpp	/^float score_game(float *board)$/;"	f
sec	src/utils.cpp	/^float sec(clock_t clocks)$/;"	f
section	src/parser.cpp	/^}section;$/;"	t	typeref:struct:__anon27	file:
seen	src/network.h	/^    int *seen;$/;"	m	struct:network
self_go	app/darknet/go.cpp	/^void self_go(char *filename, char *weightfile, char *f2, char *w2, int multi)$/;"	f
self_layer	src/layer.h	/^    struct layer *self_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
sendBlob	src/blobSender.cpp	/^bool blobSender::sendBlob(Blob *const blob) {$/;"	f	class:blobSender
sendNewBlob	src/blobSender.cpp	/^bool blobSender::sendNewBlob(Blob *const blob) {$/;"	f	class:blobSender
sendNewBlob	src/blobSender.h	/^    bool sendNewBlob(Blob blob) {$/;"	f	class:blobSender
sendRemoveBlob	src/blobSender.cpp	/^bool blobSender::sendRemoveBlob(Blob *const blob) {$/;"	f	class:blobSender
sendRemoveBlob	src/blobSender.h	/^    bool sendRemoveBlob(Blob blob) {$/;"	f	class:blobSender
sendTracks	app/darknet++/darknet++.cpp	/^void sendTracks(int cameraId, cv::Size imgSize, ObjectTracker* tracker, blobSender& sender) {$/;"	f
sendUpdateBlob	src/blobSender.cpp	/^bool blobSender::sendUpdateBlob(Blob *const blob) {$/;"	f	class:blobSender
sendUpdateBlob	src/blobSender.h	/^    bool sendUpdateBlob(Blob blob) {$/;"	f	class:blobSender
sender	src/blobSender.h	/^    std::unique_ptr<Sender> sender;$/;"	m	class:blobSender
serv_addr	src/sender.h	/^    struct sockaddr_in serv_addr;$/;"	m	class:Sender	typeref:struct:Sender::sockaddr_in
server	src/sender.h	/^    struct hostent *server;$/;"	m	class:Sender	typeref:struct:Sender::hostent
setAlphabetPath	yolo++/yolo.cpp	/^void Yolo::setAlphabetPath(const char* filename)$/;"	f	class:Yolo
setConfigFilePath	yolo++/yolo.cpp	/^void Yolo::setConfigFilePath(const char* filename)$/;"	f	class:Yolo
setDataFilePath	yolo++/yolo.cpp	/^void Yolo::setDataFilePath(const char* filename)$/;"	f	class:Yolo
setDefaults	src/layer.h	/^    void setDefaults()$/;"	f	struct:layer
setHierThreshold	yolo++/yolo.cpp	/^void Yolo::setHierThreshold(const float thresh)$/;"	f	class:Yolo
setNameListFile	yolo++/yolo.cpp	/^void Yolo::setNameListFile(const char* filename)$/;"	f	class:Yolo
setNms	yolo++/yolo.cpp	/^void Yolo::setNms(const float nms)$/;"	f	class:Yolo
setThreshold	yolo++/yolo.cpp	/^void Yolo::setThreshold(const float thresh)$/;"	f	class:Yolo
setWeightFilePath	yolo++/yolo.cpp	/^void Yolo::setWeightFilePath(const char* filename)$/;"	f	class:Yolo
set_batch_network	src/network.cpp	/^void set_batch_network(network *net, int b)$/;"	f
set_pixel	src/image.cpp	/^void set_pixel(image m, int x, int y, int c, float val)$/;"	f
shallow	src/data.h	/^    int shallow;$/;"	m	struct:__anon23
shift	src/layer.h	/^    float shift;$/;"	m	struct:layer
shortcut	src/layer.h	/^    int shortcut;$/;"	m	struct:layer
shortcut_cpu	src/blas.cpp	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
showFrame	src/display.cpp	/^void Display::showFrame(cv::Mat& frame, const Tracks& tracks,const Spawns& spawns, bool paused) {$/;"	f	class:Display
show_image	src/image.cpp	/^void show_image(image p, const char *name)$/;"	f
show_image_collapsed	src/image.cpp	/^void show_image_collapsed(image p, char *name)$/;"	f
show_image_cv	src/image.cpp	/^void show_image_cv(image p, const char *name)$/;"	f
show_image_layers	src/image.cpp	/^void show_image_layers(image p, char *name)$/;"	f
show_image_normalized	src/image.cpp	/^void show_image_normalized(image im, const char *name)$/;"	f
show_images	src/image.cpp	/^void show_images(image *ims, int n, char *window)$/;"	f
shuffle	src/utils.cpp	/^void shuffle(void *arr, size_t n, size_t size)$/;"	f
side	src/layer.h	/^    int side;$/;"	m	struct:layer
size	src/data.h	/^    int min, max, size;$/;"	m	struct:load_args
size	src/display.h	/^        int size;$/;"	m	class:Display::FPS
size	src/layer.h	/^    int size;$/;"	m	struct:layer
size	src/list.h	/^    int size;$/;"	m	struct:list
size	src/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon9
size	src/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon13
size	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon18
size_params	src/parser.cpp	/^typedef struct size_params{$/;"	s	file:
size_params	src/parser.cpp	/^} size_params;$/;"	t	typeref:struct:size_params	file:
skip	src/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon6
skipFrames	src/difference.cpp	/^const int skipFrames = 300;$/;"	v
skipped	src/difference.h	/^    int skipped;$/;"	m	class:DifferenceTracker
smooth	src/nightmare.cpp	/^void smooth(image recon, image update, float lambda, int num)$/;"	f
smoothMask	src/difference.cpp	/^void smoothMask(cv::Mat& maskImage) {$/;"	f
smooth_data	src/data.cpp	/^void smooth_data(data d)$/;"	f
smooth_l1_cpu	src/blas.cpp	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
sockfd	src/sender.h	/^    int sockfd, portno ;$/;"	m	class:Sender
softmax	src/blas.cpp	/^void softmax(float *input, int n, float temp, float *output)$/;"	f
softmax	src/layer.h	/^    int softmax;$/;"	m	struct:layer
softmax_layer	src/softmax_layer.h	/^typedef layer softmax_layer;$/;"	t
softmax_tree	src/layer.h	/^    tree *softmax_tree;$/;"	m	struct:layer
softmax_tree	src/softmax_layer.cpp	/^void softmax_tree(float *input, int batch, int inputs, float temp, tree *hierarchy, float *output)$/;"	f
sorta_shuffle	src/utils.cpp	/^void sorta_shuffle(void *arr, size_t n, size_t size, size_t sections)$/;"	f
sortable_bbox	app/darknet/compare.cpp	/^} sortable_bbox;$/;"	t	typeref:struct:__anon2	file:
sortable_bbox	src/box.cpp	/^} sortable_bbox;$/;"	t	typeref:struct:__anon30	file:
spatial_mean	src/layer.h	/^    float *spatial_mean;$/;"	m	struct:layer
spawnThickness	src/display.cpp	/^const int spawnThickness = 2;$/;"	v
spawns	src/camera.h	/^	Spawns spawns;$/;"	m	class:Camera
spawns	src/config.h	/^    Spawns spawns;$/;"	m	struct:CameraInfo
spec_end	src/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon10
spec_start	src/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon10
speed	app/darknet/darknet.cpp	/^void speed(char *cfgfile, int tics)$/;"	f
split_data	src/data.cpp	/^data *split_data(data d, int part, int total)$/;"	f
split_str	src/utils.cpp	/^list *split_str(char *s, char delim)$/;"	f
sqrt	src/layer.h	/^    int sqrt;$/;"	m	struct:layer
squared	src/layer.h	/^    float *squared;$/;"	m	struct:layer
squared_gpu	src/layer.h	/^    float * squared_gpu;$/;"	m	struct:layer
srcTensorDesc	src/layer.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
stair_activate	src/activations.h	/^static inline float stair_activate(float x)$/;"	f
stair_gradient	src/activations.h	/^static inline float stair_gradient(float x)$/;"	f
start_x	src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon20
start_y	src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon20
state	src/layer.h	/^    float *state;$/;"	m	struct:layer
state_delta	src/layer.h	/^    float *state_delta;$/;"	m	struct:layer
state_delta_gpu	src/layer.h	/^    float * state_delta_gpu;$/;"	m	struct:layer
state_gate_layer	src/layer.h	/^    struct layer *state_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_gpu	src/layer.h	/^    float * state_gpu;$/;"	m	struct:layer
state_h_layer	src/layer.h	/^    struct layer *state_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_r_layer	src/layer.h	/^    struct layer *state_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_save_layer	src/layer.h	/^    struct layer *state_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_state_layer	src/layer.h	/^    struct layer *state_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_z_layer	src/layer.h	/^    struct layer *state_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
staticLostBlobThresh	src/objecttracker.cpp	/^const double staticLostBlobThresh = 0.01;$/;"	v
statistics_connected_layer	src/connected_layer.cpp	/^void statistics_connected_layer(layer l)$/;"	f
statistics_net	app/darknet/darknet.cpp	/^void statistics_net(char *cfgfile, char *weightfile)$/;"	f
stb_image_write_test	src/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi__DNL	src/stb_image.h	2764;"	d
stbi__EOI	src/stb_image.h	2766;"	d
stbi__SOF	src/stb_image.h	2767;"	d
stbi__SOF_progressive	src/stb_image.h	2770;"	d
stbi__SOI	src/stb_image.h	2765;"	d
stbi__SOS	src/stb_image.h	2768;"	d
stbi__YCbCr_to_RGB_row	src/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	src/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__at_eof	src/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	src/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	src/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	src/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__bmask	src/stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_info	src/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	src/stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__bmp_test	src/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	src/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	src/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	src/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	src/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	src/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	src/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	src/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	src/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_y	src/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__context	src/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon7
stbi__convert_format	src/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	src/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	src/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	src/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	src/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	src/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	src/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	src/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	src/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	src/stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	src/stb_image.h	2886;"	d
stbi__div4	src/stb_image.h	2837;"	d
stbi__do_png	src/stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f
stbi__do_zlib	src/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__err	src/stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__err	src/stb_image.h	897;"	d
stbi__err	src/stb_image.h	899;"	d
stbi__err	src/stb_image.h	901;"	d
stbi__errpf	src/stb_image.h	904;"	d
stbi__errpuc	src/stb_image.h	905;"	d
stbi__expand_png_palette	src/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	src/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	src/stb_image.h	1905;"	d
stbi__fill_bits	src/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__fill_gif_background	src/stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g)$/;"	f
stbi__float2int	src/stb_image.h	1383;"	d
stbi__float_postprocess	src/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__fopen	src/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__fsh	src/stb_image.h	1906;"	d
stbi__g_failure_reason	src/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	src/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	src/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	src/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	src/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	src/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	src/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	src/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	src/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	src/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon20
stbi__gif_header	src/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	src/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	src/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	src/stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__gif_load_next	src/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f
stbi__gif_lzw	src/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon19
stbi__gif_parse_colortable	src/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	src/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	src/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	src/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	src/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	src/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	src/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	src/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__hdr_test	src/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	src/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f
stbi__hdr_to_ldr	src/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	src/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	src/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon9
stbi__idct_block	src/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	src/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	src/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__init_zdefaults	src/stb_image.h	/^static void stbi__init_zdefaults(void)$/;"	f
stbi__int16	src/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	src/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	src/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	src/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jbias	src/stb_image.h	/^static int const stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	src/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon10
stbi__jpeg_decode_block	src/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi_uc *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	src/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi_uc *dequant)$/;"	f
stbi__jpeg_dezigzag	src/stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	src/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	src/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	src/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	src/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	src/stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__jpeg_reset	src/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	src/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	src/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__load_flip	src/stb_image.h	/^static unsigned char *stbi__load_flip(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_main	src/stb_image.h	/^static unsigned char *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__loadf_main	src/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__malloc	src/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__out_gif_code	src/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	src/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	src/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	src/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	src/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncomperssed_block	src/stb_image.h	/^static int stbi__parse_uncomperssed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	src/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	src/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	src/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	src/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	src/stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f
stbi__pic_load_core	src/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	src/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon18
stbi__pic_test	src/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	src/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	src/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon16
stbi__png_info	src/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	src/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_load	src/stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__png_test	src/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	src/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon15
stbi__pnm_getinteger	src/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	src/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_isdigit	src/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	src/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	src/stb_image.h	/^static stbi_uc *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__pnm_skip_whitespace	src/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	src/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	src/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	src/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	src/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	src/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_info	src/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_load	src/stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__psd_test	src/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	src/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	src/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	src/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon12
stbi__resample_row_generic	src/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	src/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	src/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__rewind	src/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	src/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	src/stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f
stbi__skip	src/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	src/stb_image.h	/^static int stbi__sse2_available()$/;"	f
stbi__start_callbacks	src/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	src/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	src/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__stdio_callbacks	src/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	src/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	src/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	src/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__tga_info	src/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	src/stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__tga_test	src/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	src/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	src/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	src/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	src/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	src/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertically_flip_on_load	src/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__zbuf	src/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon14
stbi__zbuild_huffman	src/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	src/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdefault_length	src/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdist_base	src/stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	src/stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	src/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	src/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	src/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon13
stbi__zhuffman_decode	src/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	src/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	src/stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	src/stb_image.h	/^static int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	src/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	src/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_failure_reason	src/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_hdr_to_ldr_gamma	src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	src/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	src/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	src/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	src/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	src/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	src/stb_image.h	581;"	d
stbi_inline	src/stb_image.h	583;"	d
stbi_inline	src/stb_image.h	586;"	d
stbi_io_callbacks	src/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon6
stbi_is_hdr	src/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	src/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	src/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	src/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_callbacks	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf	src/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	src/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	src/stb_image.h	617;"	d
stbi_lrot	src/stb_image.h	619;"	d
stbi_set_flip_vertically_on_load	src/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f
stbi_set_unpremultiply_on_load	src/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	src/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_write_bmp	src/stb_image_write.h	/^int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_hdr	src/stb_image_write.h	/^int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f
stbi_write_png	src/stb_image_write.h	/^int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_mem	src/stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_tga	src/stb_image_write.h	/^int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_zlib_compress	src/stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbi_zlib_decode_buffer	src/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	src/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbiw__ZHASH	src/stb_image_write.h	467;"	d
stbiw__crc32	src/stb_image_write.h	/^unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f
stbiw__linear_to_rgbe	src/stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f
stbiw__max	src/stb_image_write.h	243;"	d
stbiw__paeth	src/stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f
stbiw__sbcount	src/stb_image_write.h	399;"	d
stbiw__sbfree	src/stb_image_write.h	400;"	d
stbiw__sbgrow	src/stb_image_write.h	396;"	d
stbiw__sbgrowf	src/stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbiw__sbm	src/stb_image_write.h	391;"	d
stbiw__sbmaybegrow	src/stb_image_write.h	395;"	d
stbiw__sbn	src/stb_image_write.h	392;"	d
stbiw__sbneedgrow	src/stb_image_write.h	394;"	d
stbiw__sbpush	src/stb_image_write.h	398;"	d
stbiw__sbraw	src/stb_image_write.h	390;"	d
stbiw__wp32	src/stb_image_write.h	587;"	d
stbiw__wpcrc	src/stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f
stbiw__wpng4	src/stb_image_write.h	586;"	d
stbiw__wptag	src/stb_image_write.h	588;"	d
stbiw__write_dump_data	src/stb_image_write.h	/^void stbiw__write_dump_data(FILE *f, int length, unsigned char *data)$/;"	f
stbiw__write_hdr_scanline	src/stb_image_write.h	/^void stbiw__write_hdr_scanline(FILE *f, int width, int comp, unsigned char *scratch, const float *scanline)$/;"	f
stbiw__write_run_data	src/stb_image_write.h	/^void stbiw__write_run_data(FILE *f, int length, unsigned char databyte)$/;"	f
stbiw__zhash	src/stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f
stbiw__zlib_add	src/stb_image_write.h	456;"	d
stbiw__zlib_bitrev	src/stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f
stbiw__zlib_countm	src/stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbiw__zlib_flush	src/stb_image_write.h	455;"	d
stbiw__zlib_flushf	src/stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbiw__zlib_huff	src/stb_image_write.h	464;"	d
stbiw__zlib_huff1	src/stb_image_write.h	460;"	d
stbiw__zlib_huff2	src/stb_image_write.h	461;"	d
stbiw__zlib_huff3	src/stb_image_write.h	462;"	d
stbiw__zlib_huff4	src/stb_image_write.h	463;"	d
stbiw__zlib_huffa	src/stb_image_write.h	458;"	d
stbiw__zlib_huffb	src/stb_image_write.h	465;"	d
stbiw_uint32	src/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
step	src/network.h	/^    int step;$/;"	m	struct:network
step	src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon20
steps	src/layer.h	/^    int steps;$/;"	m	struct:layer
steps	src/network.h	/^    int *steps;$/;"	m	struct:network
stride	src/layer.h	/^    int stride;$/;"	m	struct:layer
string_to_board	app/darknet/go.cpp	/^void string_to_board(char *s, float *board)$/;"	f
string_to_layer_type	src/parser.cpp	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f
strip	src/utils.cpp	/^void strip(char *s)$/;"	f
strip_char	src/utils.cpp	/^void strip_char(char *s, char bad)$/;"	f
subdivisions	src/network.h	/^    int subdivisions;$/;"	m	struct:network
succ_high	src/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon10
succ_low	src/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon10
suffix	src/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon19
suicide_go	app/darknet/go.cpp	/^int suicide_go(float *b, int p, int r, int c)$/;"	f
sum	src/display.h	/^        std::uint64_t sum;$/;"	m	class:Display::FPS
sum_array	src/utils.cpp	/^float sum_array(float *a, int n)$/;"	f
swap_binary	src/convolutional_layer.cpp	/^void swap_binary(convolutional_layer *l)$/;"	f
t	src/layer.h	/^    int t;$/;"	m	struct:layer
tanh_activate	src/activations.h	/^static inline float tanh_activate(float x){return (exp(2*x)-1)\/(exp(2*x)+1);}$/;"	f
tanh_gradient	src/activations.h	/^static inline float tanh_gradient(float x){return 1-x*x;}$/;"	f
targetFPS	app/darknet++/darknet++.cpp	/^const double targetFPS = 30.0;$/;"	v
targetSleep	app/darknet++/darknet++.cpp	/^const double targetSleep = 1000.0 \/ targetFPS;$/;"	v
temperature	src/layer.h	/^    float temperature;$/;"	m	struct:layer
test_box	src/box.cpp	/^void test_box()$/;"	f
test_captcha	src/captcha.cpp	/^void test_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_char_rnn	app/darknet/rnn.cpp	/^void test_char_rnn(char *cfgfile, char *weightfile, int num, char *seed, float temp, int rseed, char *token_file)$/;"	f
test_cifar	app/darknet/cifar.cpp	/^void test_cifar(char *filename, char *weightfile)$/;"	f
test_cifar_csv	app/darknet/cifar.cpp	/^void test_cifar_csv(char *filename, char *weightfile)$/;"	f
test_cifar_csvtrain	app/darknet/cifar.cpp	/^void test_cifar_csvtrain(char *filename, char *weightfile)$/;"	f
test_cifar_multi	app/darknet/cifar.cpp	/^void test_cifar_multi(char *filename, char *weightfile)$/;"	f
test_classifier	src/classifier.cpp	/^void test_classifier(char *datacfg, char *cfgfile, char *weightfile, int target_layer)$/;"	f
test_coco	src/coco.cpp	/^void test_coco(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
test_convolutional_layer	src/convolutional_layer.cpp	/^void test_convolutional_layer()$/;"	f
test_detector	app/darknet/detector.cpp	/^void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh, float hier_thresh)$/;"	f
test_dice	app/darknet/dice.cpp	/^void test_dice(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_dintersect	src/box.cpp	/^void test_dintersect()$/;"	f
test_dunion	src/box.cpp	/^void test_dunion()$/;"	f
test_go	app/darknet/go.cpp	/^void test_go(char *cfg, char *weights, int multi)$/;"	f
test_gpu_accuracy	src/gemm.cpp	/^void test_gpu_accuracy(int TA, int TB, int m, int k, int n)$/;"	f
test_gpu_blas	src/gemm.cpp	/^int test_gpu_blas()$/;"	f
test_resize	src/image.cpp	/^void test_resize(char *filename)$/;"	f
test_super	app/darknet/super.cpp	/^void test_super(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_tactic_rnn	app/darknet/rnn.cpp	/^void test_tactic_rnn(char *cfgfile, char *weightfile, int num, float temp, int rseed, char *token_file)$/;"	f
test_tag	app/darknet/tag.cpp	/^void test_tag(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_voxel	app/darknet/voxel.cpp	/^void test_voxel(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_writing	app/darknet/writing.cpp	/^void test_writing(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_yolo	app/darknet/yolo.cpp	/^void test_yolo(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
threads	src/data.h	/^    int threads;$/;"	m	struct:load_args
threat_classifier	src/classifier.cpp	/^void threat_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
three_way_max	src/image.cpp	/^float three_way_max(float a, float b, float c)$/;"	f
three_way_min	src/image.cpp	/^float three_way_min(float a, float b, float c)$/;"	f
thresh	src/layer.h	/^    float thresh;$/;"	m	struct:layer
thresh	yolo++/yolo.h	/^    float thresh;$/;"	m	class:Yolo
threshold_image	src/image.cpp	/^image threshold_image(image im, float thresh)$/;"	f
ticks	src/display.h	/^        std::int64_t *ticks;$/;"	m	class:Display::FPS
tile_images	src/image.cpp	/^image tile_images(image a, image b, int dx)$/;"	f
time_gpu_random_matrix	src/gemm.cpp	/^void time_gpu_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_ongpu	src/gemm.cpp	/^void time_ongpu(int TA, int TB, int m, int k, int n)$/;"	f
time_random_matrix	src/gemm.cpp	/^void time_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_steps	src/network.h	/^    int time_steps;$/;"	m	struct:network
time_steps	src/parser.cpp	/^    int time_steps;$/;"	m	struct:size_params	file:
tisnan	src/region_layer.cpp	/^float tisnan(float x)$/;"	f
todo	src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon10
top	src/data.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon25
top_k	src/utils.cpp	/^void top_k(float *a, int n, int k, int *index)$/;"	f
top_predictions	src/network.cpp	/^void top_predictions(network net, int k, int *index)$/;"	f
total	src/display.h	/^        int total;$/;"	m	class:Display::FPS
total_compares	app/darknet/compare.cpp	/^int total_compares = 0;$/;"	v
tq	src/stb_image.h	/^      int tq;$/;"	m	struct:__anon10::__anon11
tracks	src/objecttracker.h	/^    Tracks tracks;$/;"	m	class:ObjectTracker
train	src/network.h	/^    int train;$/;"	m	struct:network_state
train_captcha	src/captcha.cpp	/^void train_captcha(char *cfgfile, char *weightfile)$/;"	f
train_char_rnn	app/darknet/rnn.cpp	/^void train_char_rnn(char *cfgfile, char *weightfile, char *filename, int clear, int tokenized)$/;"	f
train_cifar	app/darknet/cifar.cpp	/^void train_cifar(char *cfgfile, char *weightfile)$/;"	f
train_cifar_distill	app/darknet/cifar.cpp	/^void train_cifar_distill(char *cfgfile, char *weightfile)$/;"	f
train_classifier	src/classifier.cpp	/^void train_classifier(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)$/;"	f
train_coco	src/coco.cpp	/^void train_coco(char *cfgfile, char *weightfile)$/;"	f
train_compare	app/darknet/compare.cpp	/^void train_compare(char *cfgfile, char *weightfile)$/;"	f
train_detector	app/darknet/detector.cpp	/^void train_detector(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)$/;"	f
train_dice	app/darknet/dice.cpp	/^void train_dice(char *cfgfile, char *weightfile)$/;"	f
train_go	app/darknet/go.cpp	/^void train_go(char *cfgfile, char *weightfile)$/;"	f
train_network	src/network.cpp	/^float train_network(network net, data d)$/;"	f
train_network_batch	src/network.cpp	/^float train_network_batch(network net, data d, int n)$/;"	f
train_network_datum	src/network.cpp	/^float train_network_datum(network net, float *x, float *y)$/;"	f
train_network_sgd	src/network.cpp	/^float train_network_sgd(network net, data d, int n)$/;"	f
train_super	app/darknet/super.cpp	/^void train_super(char *cfgfile, char *weightfile)$/;"	f
train_swag	app/darknet/swag.cpp	/^void train_swag(char *cfgfile, char *weightfile)$/;"	f
train_tag	app/darknet/tag.cpp	/^void train_tag(char *cfgfile, char *weightfile, int clear)$/;"	f
train_vid_rnn	app/darknet/rnn_vid.cpp	/^void train_vid_rnn(char *cfgfile, char *weightfile)$/;"	f
train_voxel	app/darknet/voxel.cpp	/^void train_voxel(char *cfgfile, char *weightfile)$/;"	f
train_writing	app/darknet/writing.cpp	/^void train_writing(char *cfgfile, char *weightfile)$/;"	f
train_yolo	app/darknet/yolo.cpp	/^void train_yolo(char *cfgfile, char *weightfile)$/;"	f
translate_array	src/utils.cpp	/^void translate_array(float *a, int n, float s)$/;"	f
translate_data_rows	src/data.cpp	/^void translate_data_rows(data d, float s)$/;"	f
translate_image	src/image.cpp	/^void translate_image(image m, float s)$/;"	f
translate_image_channel	src/image.cpp	/^void translate_image_channel(image im, int c, float v)$/;"	f
transparent	src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon20
transpose_image	src/image.cpp	/^void transpose_image(image im)$/;"	f
transpose_matrix	src/parser.cpp	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f
tree	src/tree.h	/^} tree;$/;"	t	typeref:struct:__anon32
truth	src/network.h	/^    float *truth;$/;"	m	struct:network_state
truth_gpu	src/network.h	/^    float **truth_gpu;$/;"	m	struct:network
truths	src/layer.h	/^    int truths;$/;"	m	struct:layer
try_classifier	src/classifier.cpp	/^void try_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int layer_num)$/;"	f
type	src/data.h	/^    data_type type;$/;"	m	struct:load_args
type	src/layer.h	/^    LAYER_TYPE type;$/;"	m	struct:layer
type	src/parser.cpp	/^    char *type;$/;"	m	struct:__anon27	file:
type	src/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon15
type	src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon18
update	src/display.cpp	/^void Display::FPS::update(std::int64_t newTick) {$/;"	f	class:Display::FPS
update	src/layer.h	/^    void (*update)(struct layer, int, float, float, float);$/;"	m	struct:layer
update	src/track.cpp	/^void Track::update() {$/;"	f	class:Track
update	src/track.cpp	/^void Track::update(DetectedObject& new_contour) {$/;"	f	class:Track
updateDiff	src/track.cpp	/^void Track::updateDiff(Contour& new_contour) {$/;"	f	class:Track
updateStr	src/blobSender.h	13;"	d
update_connected_layer	src/connected_layer.cpp	/^void update_connected_layer(connected_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_connected_layer_gpu	src/connected_layer.cpp	/^void update_connected_layer_gpu(connected_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_convolutional_layer	src/convolutional_layer.cpp	/^void update_convolutional_layer(convolutional_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_crnn_layer	src/crnn_layer.cpp	/^void update_crnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_crnn_layer_gpu	src/crnn_layer.cpp	/^void update_crnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_deconvolutional_layer	src/deconvolutional_layer.cpp	/^void update_deconvolutional_layer(deconvolutional_layer l, int a, float learning_rate, float momentum, float decay)$/;"	f
update_gpu	src/layer.h	/^    void (*update_gpu)(struct layer, int, float, float, float);$/;"	m	struct:layer
update_gru_layer	src/gru_layer.cpp	/^void update_gru_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_gru_layer_gpu	src/gru_layer.cpp	/^void update_gru_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_local_layer	src/local_layer.cpp	/^void update_local_layer(local_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_local_layer_gpu	src/local_layer.cpp	/^void update_local_layer_gpu(local_layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_network	src/network.cpp	/^void update_network(network net)$/;"	f
update_rnn_layer	src/rnn_layer.cpp	/^void update_rnn_layer(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
update_rnn_layer_gpu	src/rnn_layer.cpp	/^void update_rnn_layer_gpu(layer l, int batch, float learning_rate, float momentum, float decay)$/;"	f
used	src/option_list.h	/^    int used;$/;"	m	struct:__anon31
username	app/darknet/config.h	/^    std::string username;$/;"	m	struct:CameraClass
username	src/config.h	/^    std::string username;$/;"	m	struct:CameraClass
v	src/layer.h	/^    float *v;$/;"	m	struct:layer
v	src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon10::__anon11
v_gpu	src/layer.h	/^    float *v_gpu;$/;"	m	struct:layer
val	src/list.h	/^    void *val;$/;"	m	struct:node
val	src/option_list.h	/^    char *val;$/;"	m	struct:__anon31
valid_captcha	src/captcha.cpp	/^void valid_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
valid_char_rnn	app/darknet/rnn.cpp	/^void valid_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
valid_go	app/darknet/go.cpp	/^void valid_go(char *cfgfile, char *weightfile, int multi)$/;"	f
valid_tactic_rnn	app/darknet/rnn.cpp	/^void valid_tactic_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
validate_classifier_10	src/classifier.cpp	/^void validate_classifier_10(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_crop	src/classifier.cpp	/^void validate_classifier_crop(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_full	src/classifier.cpp	/^void validate_classifier_full(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_multi	src/classifier.cpp	/^void validate_classifier_multi(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_single	src/classifier.cpp	/^void validate_classifier_single(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_coco	src/coco.cpp	/^void validate_coco(char *cfgfile, char *weightfile)$/;"	f
validate_coco_recall	src/coco.cpp	/^void validate_coco_recall(char *cfgfile, char *weightfile)$/;"	f
validate_compare	app/darknet/compare.cpp	/^void validate_compare(char *filename, char *weightfile)$/;"	f
validate_detector	app/darknet/detector.cpp	/^void validate_detector(char *datacfg, char *cfgfile, char *weightfile, char *outfile)$/;"	f
validate_detector_recall	app/darknet/detector.cpp	/^void validate_detector_recall(char *cfgfile, char *weightfile)$/;"	f
validate_dice	app/darknet/dice.cpp	/^void validate_dice(char *filename, char *weightfile)$/;"	f
validate_uint32	src/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
validate_yolo	app/darknet/yolo.cpp	/^void validate_yolo(char *cfgfile, char *weightfile)$/;"	f
validate_yolo_recall	app/darknet/yolo.cpp	/^void validate_yolo_recall(char *cfgfile, char *weightfile)$/;"	f
vals	src/matrix.h	/^    float **vals;$/;"	m	struct:matrix
value	src/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon13
values	src/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon9
variance	src/layer.h	/^    float *variance;$/;"	m	struct:layer
variance_array	src/utils.cpp	/^float variance_array(float *a, int n)$/;"	f
variance_cpu	src/blas.cpp	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_delta	src/layer.h	/^    float *variance_delta;$/;"	m	struct:layer
variance_delta_cpu	src/batchnorm_layer.cpp	/^void  variance_delta_cpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
variance_delta_gpu	src/layer.h	/^    float * variance_delta_gpu;$/;"	m	struct:layer
variance_gpu	src/layer.h	/^    float * variance_gpu;$/;"	m	struct:layer
vec_char_rnn	app/darknet/rnn.cpp	/^void vec_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
video	app/darknet/camera.h	/^    cv::VideoCapture video;$/;"	m	class:Camera
video	src/camera.h	/^    cv::VideoCapture video;$/;"	m	class:Camera
visible	src/track.h	/^    bool visible;$/;"	m	class:Track
visibleCount	src/track.h	/^    int visibleCount;$/;"	m	class:Track
visibleThreshold	src/objecttracker.cpp	/^const double visibleThreshold = 0.6;$/;"	v
visualize	app/darknet/darknet.cpp	/^void visualize(char *cfgfile, char *weightfile)$/;"	f
visualize_convolutional_layer	src/convolutional_layer.cpp	/^image *visualize_convolutional_layer(convolutional_layer l, char *window, image *prev_weights)$/;"	f
visualize_network	src/network.cpp	/^void visualize_network(network net)$/;"	f
voc_names	app/darknet/yolo.cpp	/^char *voc_names[] = {"aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};$/;"	v
vs	src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon12
w	src/box.h	/^    float x, y, w, h;$/;"	m	struct:box
w	src/data.h	/^    float x, y, w, h;$/;"	m	struct:__anon25
w	src/data.h	/^    int w, h;$/;"	m	struct:__anon23
w	src/data.h	/^    int w;$/;"	m	struct:load_args
w	src/image.h	/^    int w;$/;"	m	struct:image
w	src/layer.h	/^    int h, w, c;$/;"	m	struct:layer
w	src/network.h	/^    int h, w, c;$/;"	m	struct:network
w	src/parser.cpp	/^    int w;$/;"	m	struct:size_params	file:
w	src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon20
w2	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon10::__anon11
w_lores	src/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon12
weightDesc	src/layer.h	/^    cudnnFilterDescriptor_t weightDesc;$/;"	m	struct:layer
weight_updates	src/layer.h	/^    float *weight_updates;$/;"	m	struct:layer
weight_updates_gpu	src/layer.h	/^    float * weight_updates_gpu;$/;"	m	struct:layer
weighted_sum_cpu	src/blas.cpp	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f
weightfile	yolo++/yolo.h	/^    const char *weightfile;$/;"	m	class:Yolo
weights	src/layer.h	/^    float *weights;$/;"	m	struct:layer
weights_gpu	src/layer.h	/^    float * weights_gpu;$/;"	m	struct:layer
windows	src/image.cpp	/^int windows = 0;$/;"	v
workspace	src/network.h	/^    float *workspace;$/;"	m	struct:network
workspace	src/network.h	/^    float *workspace;$/;"	m	struct:network_state
workspace_size	src/layer.h	/^    size_t workspace_size;$/;"	m	struct:layer
write3	src/stb_image_write.h	/^static void write3(FILE *f, unsigned char a, unsigned char b, unsigned char c)$/;"	f
writeDataToServer	src/sender.cpp	/^int Sender::writeDataToServer(std::string data)$/;"	f	class:Sender
write_all	src/utils.cpp	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f
write_all_fail	src/utils.cpp	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
write_int	src/utils.cpp	/^void write_int(int fd, int n)$/;"	f
write_pixels	src/stb_image_write.h	/^static void write_pixels(FILE *f, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f
writefv	src/stb_image_write.h	/^static void writefv(FILE *f, const char *fmt, va_list v)$/;"	f
x	app/darknet/rnn.cpp	/^    float *x;$/;"	m	struct:__anon1	file:
x	app/darknet/rnn_vid.cpp	/^    float *x;$/;"	m	struct:__anon3	file:
x	src/box.h	/^    float x, y, w, h;$/;"	m	struct:box
x	src/data.h	/^    float x, y, w, h;$/;"	m	struct:__anon25
x	src/layer.h	/^    float *x;$/;"	m	struct:layer
x	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon10::__anon11
x_gpu	src/layer.h	/^    float * x_gpu;$/;"	m	struct:layer
x_norm	src/layer.h	/^    float *x_norm;$/;"	m	struct:layer
x_norm_gpu	src/layer.h	/^    float * x_norm_gpu;$/;"	m	struct:layer
xnor	src/layer.h	/^    int xnor;$/;"	m	struct:layer
y	app/darknet/rnn.cpp	/^    float *y;$/;"	m	struct:__anon1	file:
y	app/darknet/rnn_vid.cpp	/^    float *y;$/;"	m	struct:__anon3	file:
y	src/box.h	/^    float x, y, w, h;$/;"	m	struct:box
y	src/data.h	/^    float x, y, w, h;$/;"	m	struct:__anon25
y	src/data.h	/^    matrix y;$/;"	m	struct:__anon23
y	src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon10::__anon11
yolo	app/darknet++/darknet++.cpp	/^Yolo yolo;$/;"	v
ypos	src/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon12
ystep	src/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon12
z_cpu	src/layer.h	/^    float *z_cpu;$/;"	m	struct:layer
z_distance	src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon14
z_expandable	src/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon14
z_gpu	src/layer.h	/^    float *z_gpu;$/;"	m	struct:layer
z_length	src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon14
zbuffer	src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon14
zbuffer_end	src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon14
zout	src/stb_image.h	/^   char *zout;$/;"	m	struct:__anon14
zout_end	src/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon14
zout_start	src/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon14
~Config	app/darknet/config.cpp	/^Config::~Config() {$/;"	f	class:Config
~Config	src/config.cpp	/^Config::~Config() {$/;"	f	class:Config
~DifferenceTracker	src/difference.cpp	/^DifferenceTracker::~DifferenceTracker() {$/;"	f	class:DifferenceTracker
~Display	src/display.cpp	/^Display::~Display() {$/;"	f	class:Display
~FPS	src/display.cpp	/^Display::FPS::~FPS() {$/;"	f	class:Display::FPS
~ObjectTracker	src/objecttracker.cpp	/^ObjectTracker::~ObjectTracker() {$/;"	f	class:ObjectTracker
~Track	src/track.cpp	/^Track::~Track() {$/;"	f	class:Track
